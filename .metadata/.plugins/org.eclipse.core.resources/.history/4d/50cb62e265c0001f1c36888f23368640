/*
 * stm32f411xx_spi_driver.c
 *
 *  Created on: Dec 22, 2024
 *      Author: hp
 */

#include "stm32f411xx_spi_driver.h"

/************************************************************************************************
 * @fn						-> SPI_PeriClkControl
 *
 * @Brief					-> This function is use to control SPI peripheral clock
 *
 * @param[in]				-> base address of the SPI peripheral
 * @param[in]				-> command to enable or disable
 * @param[in]				->
 *
 * @return					-> void
 *
 * @Note					->
 *
 */



void SPI_PeriClkControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
	if(EnorDi == ENABLE){
		if(pSPIx == SPI1){
			SPI1_PCLK_EN();
		}else if(pSPIx == SPI2){
			SPI2_PCLK_EN();
		}else if(pSPIx == SPI3){
			SPI3_PCLK_EN();
		}
	}else{
		if(pSPIx == SPI1){
			SPI1_PCLK_DI();
		}else if(pSPIx == SPI2){
			SPI2_PCLK_DI();
		}else if(pSPIx == SPI3){
			SPI3_PCLK_DI();
		}
	}
}

/************************************************************************************************
 * @fn						-> SPI_Init
 *
 * @Brief					-> This function is use to Initialize SPI peripheral
 *
 * @param[in]				-> base address of the SPI handle structure
 * @param[in]				->
 * @param[in]				->
 *
 * @return					-> void
 *
 * @Note					->
 *
 */

void SPI_Init(SPI_Handle_t *pSPIHandle){
	//first lets configure the CR1 register
	uint32_t tempreg = 0;
	//tempreg = pSPIHandle-
}

/************************************************************************************************
 * @fn						-> SPI_DeInit
 *
 * @Brief					-> This function is use to DeInitialize SPI peripheral
 *
 * @param[in]				-> base address of the SPI peripheral
 * @param[in]				->
 * @param[in]				->
 *
 * @return					-> void
 *
 * @Note					->
 *
 */

void SPI_DeInit(SPI_RegDef_t *pSPIx){
	if(pSPIx == SPI1){
		SPI1_REG_RESET();
	}else if(pSPIx == SPI2){
		SPI2_REG_RESET();
	}else if(pSPIx == SPI3){
		SPI3_REG_RESET();
	}
}

/************************************************************************************************
 * @fn						-> SPI_SendData
 *
 * @Brief					-> This function is use to sent data over SPI peripheral
 *
 * @param[in]				-> base address of the SPI peripheral
 * @param[in]				-> pointer to the tx buffer
 * @param[in]				-> len of the data
 *
 * @return					-> void
 *
 * @Note					->
 *
 */

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){

}

/************************************************************************************************
 * @fn						-> SPI_ReceiveData
 *
 * @Brief					-> This function is use to Receive the data over SPI peripheral
 *
 * @param[in]				-> base address of the SPI peripheral
 * @param[in]				-> pointer to rx buffer
 * @param[in]				-> len of the data
 *
 * @return					-> void
 *
 * @Note					->
 *
 */

void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len){

}
