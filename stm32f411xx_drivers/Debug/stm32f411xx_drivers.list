
stm32f411xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027c0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08002960  08002960  00003960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a40  08002a40  00004070  2**0
                  CONTENTS
  4 .ARM          00000008  08002a40  08002a40  00003a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a48  08002a48  00004070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a48  08002a48  00003a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a4c  08002a4c  00003a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08002a50  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  08002ac0  00004070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08002ac0  0000421c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c0e  00000000  00000000  0000409a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cef  00000000  00000000  00006ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003a8  00000000  00000000  00007998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002a7  00000000  00000000  00007d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000043a1  00000000  00000000  00007fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000048a6  00000000  00000000  0000c388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000d679  00000000  00000000  00010c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001e2a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001568  00000000  00000000  0001e2ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0001f854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002948 	.word	0x08002948

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08002948 	.word	0x08002948

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ds1307_init>:
/*
 * NOTE: return 1: Clock Halt = 1 : init failed
 * 		 return 0: Clock Halt = 0 : init successfull
 */

uint8_t ds1307_init(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	//1. init the i2c pins
	ds1307_pin_config();
 8000286:	f000 f90f 	bl	80004a8 <ds1307_pin_config>

	//2. initialize the i2c peripheral
	ds1307_i2c_config();
 800028a:	f000 f949 	bl	8000520 <ds1307_i2c_config>

	//3. enable the i2c peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 800028e:	2101      	movs	r1, #1
 8000290:	4809      	ldr	r0, [pc, #36]	@ (80002b8 <ds1307_init+0x38>)
 8000292:	f001 fb47 	bl	8001924 <I2C_PeripheralControl>

	//4. make clock halt bit as 0, to start the rtc chip
	ds1307_write(0x00, DS1307_ADDR_SEC);
 8000296:	2100      	movs	r1, #0
 8000298:	2000      	movs	r0, #0
 800029a:	f000 f957 	bl	800054c <ds1307_write>

	//5. read back clock halt bit, if it is reset initialization is successfull else failed
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 800029e:	2000      	movs	r0, #0
 80002a0:	f000 f970 	bl	8000584 <ds1307_read>
 80002a4:	4603      	mov	r3, r0
 80002a6:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7) & 0x1);
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	09db      	lsrs	r3, r3, #7
 80002ac:	b2db      	uxtb	r3, r3
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40005400 	.word	0x40005400

080002bc <ds1307_set_current_time>:


void ds1307_set_current_time(RTC_time_t *rtc_time){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 f979 	bl	80005c0 <binary_to_bcd>
 80002ce:	4603      	mov	r3, r0
 80002d0:	73bb      	strb	r3, [r7, #14]
	//cleared the 7th bit which Clock Halt CH bit, clearing it is very important
	seconds &= ~(1 << 7);
 80002d2:	7bbb      	ldrb	r3, [r7, #14]
 80002d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80002d8:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 80002da:	7bbb      	ldrb	r3, [r7, #14]
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 f934 	bl	800054c <ds1307_write>
	//for minutes
	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	785b      	ldrb	r3, [r3, #1]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f969 	bl	80005c0 <binary_to_bcd>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2101      	movs	r1, #1
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 f92a 	bl	800054c <ds1307_write>

	hrs = binary_to_bcd(rtc_time->hours);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	789b      	ldrb	r3, [r3, #2]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 f95f 	bl	80005c0 <binary_to_bcd>
 8000302:	4603      	mov	r3, r0
 8000304:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS){
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	78db      	ldrb	r3, [r3, #3]
 800030a:	2b02      	cmp	r3, #2
 800030c:	d104      	bne.n	8000318 <ds1307_set_current_time+0x5c>
		//then i have to clear the 6th bit, as per datasheet of ds1307
		hrs &= ~(1 << 6);
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000314:	73fb      	strb	r3, [r7, #15]
 8000316:	e011      	b.n	800033c <ds1307_set_current_time+0x80>
	}else{
		//else if it is 12 hrs format, it is must to set the 6th bit
		hrs |= (1 << 6);
 8000318:	7bfb      	ldrb	r3, [r7, #15]
 800031a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800031e:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format == TIME_FORMAT_12HRS_PM) ? hrs | (1 << 5) : hrs & ~(1 << 5);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	78db      	ldrb	r3, [r3, #3]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d104      	bne.n	8000332 <ds1307_set_current_time+0x76>
 8000328:	7bfb      	ldrb	r3, [r7, #15]
 800032a:	f043 0320 	orr.w	r3, r3, #32
 800032e:	b2db      	uxtb	r3, r3
 8000330:	e003      	b.n	800033a <ds1307_set_current_time+0x7e>
 8000332:	7bfb      	ldrb	r3, [r7, #15]
 8000334:	f023 0320 	bic.w	r3, r3, #32
 8000338:	b2db      	uxtb	r3, r3
 800033a:	73fb      	strb	r3, [r7, #15]
	}
	//write the hrs value in hrs register
	ds1307_write(hrs, DS1307_ADDR_HRS);
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	2102      	movs	r1, #2
 8000340:	4618      	mov	r0, r3
 8000342:	f000 f903 	bl	800054c <ds1307_write>

}
 8000346:	bf00      	nop
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}

0800034e <ds1307_get_current_time>:


void ds1307_get_current_time(RTC_time_t *rtc_time){
 800034e:	b580      	push	{r7, lr}
 8000350:	b084      	sub	sp, #16
 8000352:	af00      	add	r7, sp, #0
 8000354:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = ds1307_read(DS1307_ADDR_SEC);
 8000356:	2000      	movs	r0, #0
 8000358:	f000 f914 	bl	8000584 <ds1307_read>
 800035c:	4603      	mov	r3, r0
 800035e:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);
 8000360:	7bbb      	ldrb	r3, [r7, #14]
 8000362:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000366:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 8000368:	7bbb      	ldrb	r3, [r7, #14]
 800036a:	4618      	mov	r0, r3
 800036c:	f000 f954 	bl	8000618 <bcd_to_binary>
 8000370:	4603      	mov	r3, r0
 8000372:	461a      	mov	r2, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 8000378:	2001      	movs	r0, #1
 800037a:	f000 f903 	bl	8000584 <ds1307_read>
 800037e:	4603      	mov	r3, r0
 8000380:	4618      	mov	r0, r3
 8000382:	f000 f949 	bl	8000618 <bcd_to_binary>
 8000386:	4603      	mov	r3, r0
 8000388:	461a      	mov	r2, r3
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 800038e:	2002      	movs	r0, #2
 8000390:	f000 f8f8 	bl	8000584 <ds1307_read>
 8000394:	4603      	mov	r3, r0
 8000396:	73fb      	strb	r3, [r7, #15]
	if(hrs & (1 << 6)){
 8000398:	7bfb      	ldrb	r3, [r7, #15]
 800039a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d00f      	beq.n	80003c2 <ds1307_get_current_time+0x74>
		//12 hr format
		rtc_time->time_format = ! ((hrs & (1 << 5)) == 0);
 80003a2:	7bfb      	ldrb	r3, [r7, #15]
 80003a4:	f003 0320 	and.w	r3, r3, #32
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	bf14      	ite	ne
 80003ac:	2301      	movne	r3, #1
 80003ae:	2300      	moveq	r3, #0
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	461a      	mov	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	70da      	strb	r2, [r3, #3]
		//clearing 5th and 6th bit
		hrs &= ~(0x3 << 5);
 80003b8:	7bfb      	ldrb	r3, [r7, #15]
 80003ba:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80003be:	73fb      	strb	r3, [r7, #15]
 80003c0:	e002      	b.n	80003c8 <ds1307_get_current_time+0x7a>

	}else{
		//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	2202      	movs	r2, #2
 80003c6:	70da      	strb	r2, [r3, #3]
	}
	rtc_time->hours = bcd_to_binary(hrs);
 80003c8:	7bfb      	ldrb	r3, [r7, #15]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 f924 	bl	8000618 <bcd_to_binary>
 80003d0:	4603      	mov	r3, r0
 80003d2:	461a      	mov	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	709a      	strb	r2, [r3, #2]
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_date_t *rtc_date){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]

	ds1307_write(binary_to_bcd(rtc_date->date), DS1307_ADDR_DATE);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	4618      	mov	r0, r3
 80003ee:	f000 f8e7 	bl	80005c0 <binary_to_bcd>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2104      	movs	r1, #4
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 f8a8 	bl	800054c <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	78db      	ldrb	r3, [r3, #3]
 8000400:	4618      	mov	r0, r3
 8000402:	f000 f8dd 	bl	80005c0 <binary_to_bcd>
 8000406:	4603      	mov	r3, r0
 8000408:	2103      	movs	r1, #3
 800040a:	4618      	mov	r0, r3
 800040c:	f000 f89e 	bl	800054c <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	785b      	ldrb	r3, [r3, #1]
 8000414:	4618      	mov	r0, r3
 8000416:	f000 f8d3 	bl	80005c0 <binary_to_bcd>
 800041a:	4603      	mov	r3, r0
 800041c:	2105      	movs	r1, #5
 800041e:	4618      	mov	r0, r3
 8000420:	f000 f894 	bl	800054c <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	789b      	ldrb	r3, [r3, #2]
 8000428:	4618      	mov	r0, r3
 800042a:	f000 f8c9 	bl	80005c0 <binary_to_bcd>
 800042e:	4603      	mov	r3, r0
 8000430:	2106      	movs	r1, #6
 8000432:	4618      	mov	r0, r3
 8000434:	f000 f88a 	bl	800054c <ds1307_write>

}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}

08000440 <ds1307_get_current_date>:


void ds1307_get_current_date(RTC_date_t *rtc_date){
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 8000448:	2004      	movs	r0, #4
 800044a:	f000 f89b 	bl	8000584 <ds1307_read>
 800044e:	4603      	mov	r3, r0
 8000450:	4618      	mov	r0, r3
 8000452:	f000 f8e1 	bl	8000618 <bcd_to_binary>
 8000456:	4603      	mov	r3, r0
 8000458:	461a      	mov	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	701a      	strb	r2, [r3, #0]
	rtc_date->day = bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 800045e:	2003      	movs	r0, #3
 8000460:	f000 f890 	bl	8000584 <ds1307_read>
 8000464:	4603      	mov	r3, r0
 8000466:	4618      	mov	r0, r3
 8000468:	f000 f8d6 	bl	8000618 <bcd_to_binary>
 800046c:	4603      	mov	r3, r0
 800046e:	461a      	mov	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	70da      	strb	r2, [r3, #3]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 8000474:	2005      	movs	r0, #5
 8000476:	f000 f885 	bl	8000584 <ds1307_read>
 800047a:	4603      	mov	r3, r0
 800047c:	4618      	mov	r0, r3
 800047e:	f000 f8cb 	bl	8000618 <bcd_to_binary>
 8000482:	4603      	mov	r3, r0
 8000484:	461a      	mov	r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 800048a:	2006      	movs	r0, #6
 800048c:	f000 f87a 	bl	8000584 <ds1307_read>
 8000490:	4603      	mov	r3, r0
 8000492:	4618      	mov	r0, r3
 8000494:	f000 f8c0 	bl	8000618 <bcd_to_binary>
 8000498:	4603      	mov	r3, r0
 800049a:	461a      	mov	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	709a      	strb	r2, [r3, #2]

}
 80004a0:	bf00      	nop
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <ds1307_pin_config>:


static void ds1307_pin_config(void){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;

	memset(&i2c_sda, 0, sizeof(i2c_sda));
 80004ae:	f107 030c 	add.w	r3, r7, #12
 80004b2:	220c      	movs	r2, #12
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f001 fcc8 	bl	8001e4c <memset>
	memset(&i2c_scl, 0, sizeof(i2c_scl));
 80004bc:	463b      	mov	r3, r7
 80004be:	220c      	movs	r2, #12
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f001 fcc2 	bl	8001e4c <memset>

	/*
	 * I2C_SDA => PB7
	 * I2C_SCL => PB6
	 */
	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 80004c8:	4b14      	ldr	r3, [pc, #80]	@ (800051c <ds1307_pin_config+0x74>)
 80004ca:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFuncMode = 4;
 80004cc:	2304      	movs	r3, #4
 80004ce:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80004d0:	2302      	movs	r3, #2
 80004d2:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 80004d4:	2307      	movs	r3, #7
 80004d6:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80004d8:	2301      	movs	r3, #1
 80004da:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 80004dc:	2300      	movs	r3, #0
 80004de:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80004e0:	2302      	movs	r3, #2
 80004e2:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 80004e4:	f107 030c 	add.w	r3, r7, #12
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 fda9 	bl	8001040 <GPIO_Init>

	//now for i2c_scl

	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 80004ee:	4b0b      	ldr	r3, [pc, #44]	@ (800051c <ds1307_pin_config+0x74>)
 80004f0:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFuncMode = 4;
 80004f2:	2304      	movs	r3, #4
 80004f4:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80004f6:	2302      	movs	r3, #2
 80004f8:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 80004fa:	2306      	movs	r3, #6
 80004fc:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80004fe:	2301      	movs	r3, #1
 8000500:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000502:	2300      	movs	r3, #0
 8000504:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000506:	2302      	movs	r3, #2
 8000508:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&i2c_scl);
 800050a:	463b      	mov	r3, r7
 800050c:	4618      	mov	r0, r3
 800050e:	f000 fd97 	bl	8001040 <GPIO_Init>

}
 8000512:	bf00      	nop
 8000514:	3718      	adds	r7, #24
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40020400 	.word	0x40020400

08000520 <ds1307_i2c_config>:

static void ds1307_i2c_config(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	g_ds1307I2CHandle.pI2Cx = DS1307_I2C;
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <ds1307_i2c_config+0x20>)
 8000526:	4a07      	ldr	r2, [pc, #28]	@ (8000544 <ds1307_i2c_config+0x24>)
 8000528:	601a      	str	r2, [r3, #0]
	g_ds1307I2CHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800052a:	4b05      	ldr	r3, [pc, #20]	@ (8000540 <ds1307_i2c_config+0x20>)
 800052c:	2201      	movs	r2, #1
 800052e:	725a      	strb	r2, [r3, #9]
	g_ds1307I2CHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 8000530:	4b03      	ldr	r3, [pc, #12]	@ (8000540 <ds1307_i2c_config+0x20>)
 8000532:	4a05      	ldr	r2, [pc, #20]	@ (8000548 <ds1307_i2c_config+0x28>)
 8000534:	605a      	str	r2, [r3, #4]

	I2C_Init(&g_ds1307I2CHandle);
 8000536:	4802      	ldr	r0, [pc, #8]	@ (8000540 <ds1307_i2c_config+0x20>)
 8000538:	f001 f82c 	bl	8001594 <I2C_Init>

}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	2000008c 	.word	0x2000008c
 8000544:	40005400 	.word	0x40005400
 8000548:	000186a0 	.word	0x000186a0

0800054c <ds1307_write>:


static void ds1307_write(uint8_t value, uint8_t reg_addr){
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af02      	add	r7, sp, #8
 8000552:	4603      	mov	r3, r0
 8000554:	460a      	mov	r2, r1
 8000556:	71fb      	strb	r3, [r7, #7]
 8000558:	4613      	mov	r3, r2
 800055a:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 800055c:	79bb      	ldrb	r3, [r7, #6]
 800055e:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds1307I2CHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 8000564:	f107 010c 	add.w	r1, r7, #12
 8000568:	2300      	movs	r3, #0
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	2368      	movs	r3, #104	@ 0x68
 800056e:	2202      	movs	r2, #2
 8000570:	4803      	ldr	r0, [pc, #12]	@ (8000580 <ds1307_write+0x34>)
 8000572:	f001 f8d5 	bl	8001720 <I2C_MasterSendData>

}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	2000008c 	.word	0x2000008c

08000584 <ds1307_read>:

static uint8_t ds1307_read(uint8_t reg_addr){
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af02      	add	r7, sp, #8
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	I2C_MasterSendData(&g_ds1307I2CHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 800058e:	1df9      	adds	r1, r7, #7
 8000590:	2300      	movs	r3, #0
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2368      	movs	r3, #104	@ 0x68
 8000596:	2201      	movs	r2, #1
 8000598:	4808      	ldr	r0, [pc, #32]	@ (80005bc <ds1307_read+0x38>)
 800059a:	f001 f8c1 	bl	8001720 <I2C_MasterSendData>
	I2C_MasterReceiveData(&g_ds1307I2CHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 800059e:	f107 010f 	add.w	r1, r7, #15
 80005a2:	2300      	movs	r3, #0
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2368      	movs	r3, #104	@ 0x68
 80005a8:	2201      	movs	r2, #1
 80005aa:	4804      	ldr	r0, [pc, #16]	@ (80005bc <ds1307_read+0x38>)
 80005ac:	f001 f919 	bl	80017e2 <I2C_MasterReceiveData>

	return data;
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	2000008c 	.word	0x2000008c

080005c0 <binary_to_bcd>:


static uint8_t binary_to_bcd(uint8_t value){
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n;
	uint8_t bcd;
	bcd = value;
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	73fb      	strb	r3, [r7, #15]

	if(value >= 10){
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2b09      	cmp	r3, #9
 80005d2:	d918      	bls.n	8000606 <binary_to_bcd+0x46>
		m = value / 10;
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000614 <binary_to_bcd+0x54>)
 80005d8:	fba2 2303 	umull	r2, r3, r2, r3
 80005dc:	08db      	lsrs	r3, r3, #3
 80005de:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 80005e0:	79fa      	ldrb	r2, [r7, #7]
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <binary_to_bcd+0x54>)
 80005e4:	fba3 1302 	umull	r1, r3, r3, r2
 80005e8:	08d9      	lsrs	r1, r3, #3
 80005ea:	460b      	mov	r3, r1
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	440b      	add	r3, r1
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	737b      	strb	r3, [r7, #13]
		bcd = (uint8_t)((m << 4) | n);
 80005f6:	7bbb      	ldrb	r3, [r7, #14]
 80005f8:	011b      	lsls	r3, r3, #4
 80005fa:	b25a      	sxtb	r2, r3
 80005fc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000600:	4313      	orrs	r3, r2
 8000602:	b25b      	sxtb	r3, r3
 8000604:	73fb      	strb	r3, [r7, #15]
	}
	return bcd;
 8000606:	7bfb      	ldrb	r3, [r7, #15]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	cccccccd 	.word	0xcccccccd

08000618 <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t value){
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
	uint8_t m,  n;
	uint8_t bin;
	m = (uint8_t)((value >> 4 ) * 10);
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	091b      	lsrs	r3, r3, #4
 8000626:	b2db      	uxtb	r3, r3
 8000628:	461a      	mov	r2, r3
 800062a:	0092      	lsls	r2, r2, #2
 800062c:	4413      	add	r3, r2
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	73fb      	strb	r3, [r7, #15]
	n = (value & (uint8_t)0x0F);
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	f003 030f 	and.w	r3, r3, #15
 8000638:	73bb      	strb	r3, [r7, #14]
	bin = (uint8_t)(m + n);
 800063a:	7bfa      	ldrb	r2, [r7, #15]
 800063c:	7bbb      	ldrb	r3, [r7, #14]
 800063e:	4413      	add	r3, r2
 8000640:	737b      	strb	r3, [r7, #13]

	return bin;
 8000642:	7b7b      	ldrb	r3, [r7, #13]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
	...

08000650 <lcd_send_command>:
static void write_4_bits(uint8_t value);
static void lcd_enable(void);



void lcd_send_command(uint8_t cmd){
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]

	/* RS = 0 for lcd commands */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2100      	movs	r1, #0
 800065e:	480c      	ldr	r0, [pc, #48]	@ (8000690 <lcd_send_command+0x40>)
 8000660:	f000 fe98 	bl	8001394 <GPIO_WriteToOutputPin>

	/* RW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	2101      	movs	r1, #1
 8000668:	4809      	ldr	r0, [pc, #36]	@ (8000690 <lcd_send_command+0x40>)
 800066a:	f000 fe93 	bl	8001394 <GPIO_WriteToOutputPin>

	write_4_bits(cmd >> 4);
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	091b      	lsrs	r3, r3, #4
 8000672:	b2db      	uxtb	r3, r3
 8000674:	4618      	mov	r0, r3
 8000676:	f000 f8cb 	bl	8000810 <write_4_bits>
	write_4_bits(cmd & 0x0F);
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	f003 030f 	and.w	r3, r3, #15
 8000680:	b2db      	uxtb	r3, r3
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f8c4 	bl	8000810 <write_4_bits>
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40020c00 	.word	0x40020c00

08000694 <lcd_print_char>:
 * This function sends a character to the lcd, here we used 4 bit data transmission
 * First higher nibbles of data, send on the data lines D4, D5, D6, D7
 * Then lower nibbles of data, will be send on RS, RS
 */

void lcd_print_char(uint8_t data){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
	/* RS = 1, for LCD user data */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2100      	movs	r1, #0
 80006a2:	480c      	ldr	r0, [pc, #48]	@ (80006d4 <lcd_print_char+0x40>)
 80006a4:	f000 fe76 	bl	8001394 <GPIO_WriteToOutputPin>

	/* RW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2101      	movs	r1, #1
 80006ac:	4809      	ldr	r0, [pc, #36]	@ (80006d4 <lcd_print_char+0x40>)
 80006ae:	f000 fe71 	bl	8001394 <GPIO_WriteToOutputPin>

	/* higher nibble */
	write_4_bits(data >> 4);
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	091b      	lsrs	r3, r3, #4
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f8a9 	bl	8000810 <write_4_bits>
	/* lower nibble */
	write_4_bits(data & 0x0F);
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 030f 	and.w	r3, r3, #15
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f8a2 	bl	8000810 <write_4_bits>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40020c00 	.word	0x40020c00

080006d8 <lcd_print_string>:

void lcd_print_string(char *message){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

	do{
		lcd_print_char((uint8_t)*message);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ffd5 	bl	8000694 <lcd_print_char>

	}while(*message != '\0');
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d1f6      	bne.n	80006e0 <lcd_print_string+0x8>
}
 80006f2:	bf00      	nop
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <lcd_init>:


void lcd_init(void){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
	//1. Configure the gpio pins which are used for lcd connections
	GPIO_Handle_t lcd_signal;

	lcd_signal.pGPIOx = LCD_GPIO_PORT;
 8000702:	4b42      	ldr	r3, [pc, #264]	@ (800080c <lcd_init+0x110>)
 8000704:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000706:	2301      	movs	r3, #1
 8000708:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 800070a:	2300      	movs	r3, #0
 800070c:	723b      	strb	r3, [r7, #8]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800070e:	2300      	movs	r3, #0
 8000710:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NOPUPD;
 8000712:	2300      	movs	r3, #0
 8000714:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000716:	2302      	movs	r3, #2
 8000718:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&lcd_signal);
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fc8f 	bl	8001040 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 8000722:	2301      	movs	r3, #1
 8000724:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fc89 	bl	8001040 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 800072e:	2302      	movs	r3, #2
 8000730:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fc83 	bl	8001040 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 800073a:	2303      	movs	r3, #3
 800073c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fc7d 	bl	8001040 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 8000746:	2304      	movs	r3, #4
 8000748:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fc77 	bl	8001040 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 8000752:	2305      	movs	r3, #5
 8000754:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fc71 	bl	8001040 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 800075e:	2306      	movs	r3, #6
 8000760:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fc6b 	bl	8001040 <GPIO_Init>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	4827      	ldr	r0, [pc, #156]	@ (800080c <lcd_init+0x110>)
 8000770:	f000 fe10 	bl	8001394 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	2101      	movs	r1, #1
 8000778:	4824      	ldr	r0, [pc, #144]	@ (800080c <lcd_init+0x110>)
 800077a:	f000 fe0b 	bl	8001394 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2102      	movs	r1, #2
 8000782:	4822      	ldr	r0, [pc, #136]	@ (800080c <lcd_init+0x110>)
 8000784:	f000 fe06 	bl	8001394 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2103      	movs	r1, #3
 800078c:	481f      	ldr	r0, [pc, #124]	@ (800080c <lcd_init+0x110>)
 800078e:	f000 fe01 	bl	8001394 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2104      	movs	r1, #4
 8000796:	481d      	ldr	r0, [pc, #116]	@ (800080c <lcd_init+0x110>)
 8000798:	f000 fdfc 	bl	8001394 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2105      	movs	r1, #5
 80007a0:	481a      	ldr	r0, [pc, #104]	@ (800080c <lcd_init+0x110>)
 80007a2:	f000 fdf7 	bl	8001394 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2106      	movs	r1, #6
 80007aa:	4818      	ldr	r0, [pc, #96]	@ (800080c <lcd_init+0x110>)
 80007ac:	f000 fdf2 	bl	8001394 <GPIO_WriteToOutputPin>

	//2. do the lcd initialization
	mdelay(40);
 80007b0:	2028      	movs	r0, #40	@ 0x28
 80007b2:	f000 f8b7 	bl	8000924 <mdelay>

	/* RS = 0, for LCD Command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	4814      	ldr	r0, [pc, #80]	@ (800080c <lcd_init+0x110>)
 80007bc:	f000 fdea 	bl	8001394 <GPIO_WriteToOutputPin>

	/* RW = 0, Writing to LCD */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2101      	movs	r1, #1
 80007c4:	4811      	ldr	r0, [pc, #68]	@ (800080c <lcd_init+0x110>)
 80007c6:	f000 fde5 	bl	8001394 <GPIO_WriteToOutputPin>

	write_4_bits(0x3);
 80007ca:	2003      	movs	r0, #3
 80007cc:	f000 f820 	bl	8000810 <write_4_bits>

	mdelay(5);
 80007d0:	2005      	movs	r0, #5
 80007d2:	f000 f8a7 	bl	8000924 <mdelay>

	write_4_bits(0x3);
 80007d6:	2003      	movs	r0, #3
 80007d8:	f000 f81a 	bl	8000810 <write_4_bits>

	udelay(150);
 80007dc:	2096      	movs	r0, #150	@ 0x96
 80007de:	f000 f8b9 	bl	8000954 <udelay>

	write_4_bits(0x3);
 80007e2:	2003      	movs	r0, #3
 80007e4:	f000 f814 	bl	8000810 <write_4_bits>

	write_4_bits(0x2);
 80007e8:	2002      	movs	r0, #2
 80007ea:	f000 f811 	bl	8000810 <write_4_bits>

	/* function set command */
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 80007ee:	2028      	movs	r0, #40	@ 0x28
 80007f0:	f7ff ff2e 	bl	8000650 <lcd_send_command>

	/* display on and cursor on */
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 80007f4:	2028      	movs	r0, #40	@ 0x28
 80007f6:	f7ff ff2b 	bl	8000650 <lcd_send_command>

	lcd_display_clear();
 80007fa:	f000 f841 	bl	8000880 <lcd_display_clear>

	/* entry mode set */
	lcd_send_command(LCD_CMD_INCADD);
 80007fe:	2006      	movs	r0, #6
 8000800:	f7ff ff26 	bl	8000650 <lcd_send_command>
}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40020c00 	.word	0x40020c00

08000810 <write_4_bits>:

/* writes 4 bits of data/command on to D4, D5, D6 and D7 */
static void write_4_bits(uint8_t value){
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, ((value >> 0) & 0x1));
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	b2db      	uxtb	r3, r3
 8000822:	461a      	mov	r2, r3
 8000824:	2103      	movs	r1, #3
 8000826:	4815      	ldr	r0, [pc, #84]	@ (800087c <write_4_bits+0x6c>)
 8000828:	f000 fdb4 	bl	8001394 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, ((value >> 1) & 0x2));
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	085b      	lsrs	r3, r3, #1
 8000830:	b2db      	uxtb	r3, r3
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	b2db      	uxtb	r3, r3
 8000838:	461a      	mov	r2, r3
 800083a:	2104      	movs	r1, #4
 800083c:	480f      	ldr	r0, [pc, #60]	@ (800087c <write_4_bits+0x6c>)
 800083e:	f000 fda9 	bl	8001394 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, ((value >> 2) & 0x3));
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	089b      	lsrs	r3, r3, #2
 8000846:	b2db      	uxtb	r3, r3
 8000848:	f003 0303 	and.w	r3, r3, #3
 800084c:	b2db      	uxtb	r3, r3
 800084e:	461a      	mov	r2, r3
 8000850:	2105      	movs	r1, #5
 8000852:	480a      	ldr	r0, [pc, #40]	@ (800087c <write_4_bits+0x6c>)
 8000854:	f000 fd9e 	bl	8001394 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, ((value >> 3) & 0x4));
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	08db      	lsrs	r3, r3, #3
 800085c:	b2db      	uxtb	r3, r3
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	b2db      	uxtb	r3, r3
 8000864:	461a      	mov	r2, r3
 8000866:	2106      	movs	r1, #6
 8000868:	4804      	ldr	r0, [pc, #16]	@ (800087c <write_4_bits+0x6c>)
 800086a:	f000 fd93 	bl	8001394 <GPIO_WriteToOutputPin>

	lcd_enable();
 800086e:	f000 f843 	bl	80008f8 <lcd_enable>

}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40020c00 	.word	0x40020c00

08000880 <lcd_display_clear>:

void lcd_display_clear(void){
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

	lcd_send_command(LCD_CMD_DIS_CLEAR);
 8000884:	2001      	movs	r0, #1
 8000886:	f7ff fee3 	bl	8000650 <lcd_send_command>
	/*
	 * check page number 24, display clear command is 24 and return home command execution is
	 * wait time around 2 ms
	 */
	mdelay(2);
 800088a:	2002      	movs	r0, #2
 800088c:	f000 f84a 	bl	8000924 <mdelay>
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}

08000894 <lcd_display_return_home>:

/* cursor return home position */

void lcd_display_return_home(void){
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

	lcd_send_command(LCD_CMD_DIS_RETURN_HOME);
 8000898:	2002      	movs	r0, #2
 800089a:	f7ff fed9 	bl	8000650 <lcd_send_command>
	/*
	* check page number 24, display clear command is 24 and return home command execution is
	* wait time around 2 ms
	*/
	mdelay(2);
 800089e:	2002      	movs	r0, #2
 80008a0:	f000 f840 	bl	8000924 <mdelay>

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <lcd_set_cursor>:
  *   Set Lcd to a specified location given by row and column information
  *   Row Number (1 to 2)
  *   Column Number (1 to 16) Assuming a 2 X 16 characters display
  */

void lcd_set_cursor(uint8_t row, uint8_t column){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	460a      	mov	r2, r1
 80008b2:	71fb      	strb	r3, [r7, #7]
 80008b4:	4613      	mov	r3, r2
 80008b6:	71bb      	strb	r3, [r7, #6]

	column--;
 80008b8:	79bb      	ldrb	r3, [r7, #6]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	71bb      	strb	r3, [r7, #6]
	switch(row){
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d002      	beq.n	80008ca <lcd_set_cursor+0x22>
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d009      	beq.n	80008dc <lcd_set_cursor+0x34>
	case 2:
		/* set cursor to 2nd row address and add index */
		lcd_send_command((column |= 0xC0));
		break;
	default:
		break;
 80008c8:	e011      	b.n	80008ee <lcd_set_cursor+0x46>
		lcd_send_command((column |= 0x80));
 80008ca:	79bb      	ldrb	r3, [r7, #6]
 80008cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008d0:	71bb      	strb	r3, [r7, #6]
 80008d2:	79bb      	ldrb	r3, [r7, #6]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff febb 	bl	8000650 <lcd_send_command>
		break;
 80008da:	e008      	b.n	80008ee <lcd_set_cursor+0x46>
		lcd_send_command((column |= 0xC0));
 80008dc:	79bb      	ldrb	r3, [r7, #6]
 80008de:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80008e2:	71bb      	strb	r3, [r7, #6]
 80008e4:	79bb      	ldrb	r3, [r7, #6]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff feb2 	bl	8000650 <lcd_send_command>
		break;
 80008ec:	bf00      	nop

	}
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <lcd_enable>:

static void lcd_enable(void){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2102      	movs	r1, #2
 8000900:	4807      	ldr	r0, [pc, #28]	@ (8000920 <lcd_enable+0x28>)
 8000902:	f000 fd47 	bl	8001394 <GPIO_WriteToOutputPin>
	udelay(10);
 8000906:	200a      	movs	r0, #10
 8000908:	f000 f824 	bl	8000954 <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2102      	movs	r1, #2
 8000910:	4803      	ldr	r0, [pc, #12]	@ (8000920 <lcd_enable+0x28>)
 8000912:	f000 fd3f 	bl	8001394 <GPIO_WriteToOutputPin>
	udelay(100); /* execution time is 34 micro seconds */
 8000916:	2064      	movs	r0, #100	@ 0x64
 8000918:	f000 f81c 	bl	8000954 <udelay>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40020c00 	.word	0x40020c00

08000924 <mdelay>:

void mdelay(uint32_t cnt){
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0; i < (cnt * 1000); i++);
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	e002      	b.n	8000938 <mdelay+0x14>
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	3301      	adds	r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800093e:	fb02 f303 	mul.w	r3, r2, r3
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	429a      	cmp	r2, r3
 8000946:	d3f4      	bcc.n	8000932 <mdelay+0xe>
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <udelay>:

void udelay(uint32_t cnt){
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < (cnt * 1); i++);
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	e002      	b.n	8000968 <udelay+0x14>
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	3301      	adds	r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fa      	ldr	r2, [r7, #12]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	429a      	cmp	r2, r3
 800096e:	d3f8      	bcc.n	8000962 <udelay+0xe>
}
 8000970:	bf00      	nop
 8000972:	bf00      	nop
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <number_to_string>:

//enable this macros to test the project on the hardware
#define PRINT_LCD


void number_to_string(uint8_t num, char* buff){
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	6039      	str	r1, [r7, #0]
 8000986:	71fb      	strb	r3, [r7, #7]

	if(num < 10){
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2b09      	cmp	r3, #9
 800098c:	d809      	bhi.n	80009a2 <number_to_string+0x26>
		buff[0] = '0';
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	2230      	movs	r2, #48	@ 0x30
 8000992:	701a      	strb	r2, [r3, #0]
		buff[1] = num + 48;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	3301      	adds	r3, #1
 8000998:	79fa      	ldrb	r2, [r7, #7]
 800099a:	3230      	adds	r2, #48	@ 0x30
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99){
		buff[0] = ((num / 10) + 48);
		buff[1] = ((num % 10) + 48);
	}
}
 80009a0:	e01f      	b.n	80009e2 <number_to_string+0x66>
	}else if(num >= 10 && num < 99){
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2b09      	cmp	r3, #9
 80009a6:	d91c      	bls.n	80009e2 <number_to_string+0x66>
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	2b62      	cmp	r3, #98	@ 0x62
 80009ac:	d819      	bhi.n	80009e2 <number_to_string+0x66>
		buff[0] = ((num / 10) + 48);
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	4a0e      	ldr	r2, [pc, #56]	@ (80009ec <number_to_string+0x70>)
 80009b2:	fba2 2303 	umull	r2, r3, r2, r3
 80009b6:	08db      	lsrs	r3, r3, #3
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	3330      	adds	r3, #48	@ 0x30
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	701a      	strb	r2, [r3, #0]
		buff[1] = ((num % 10) + 48);
 80009c2:	79fa      	ldrb	r2, [r7, #7]
 80009c4:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <number_to_string+0x70>)
 80009c6:	fba3 1302 	umull	r1, r3, r3, r2
 80009ca:	08d9      	lsrs	r1, r3, #3
 80009cc:	460b      	mov	r3, r1
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	440b      	add	r3, r1
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	3230      	adds	r2, #48	@ 0x30
 80009de:	b2d2      	uxtb	r2, r2
 80009e0:	701a      	strb	r2, [r3, #0]
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	cccccccd 	.word	0xcccccccd

080009f0 <get_day_of_week>:


char* get_day_of_week(uint8_t i){
 80009f0:	b4b0      	push	{r4, r5, r7}
 80009f2:	b08b      	sub	sp, #44	@ 0x2c
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
	char* days[] = {"SUNDAY", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY"};
 80009fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <get_day_of_week+0x38>)
 80009fc:	f107 040c 	add.w	r4, r7, #12
 8000a00:	461d      	mov	r5, r3
 8000a02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i - 1];
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	3b01      	subs	r3, #1
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	3328      	adds	r3, #40	@ 0x28
 8000a16:	443b      	add	r3, r7
 8000a18:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	372c      	adds	r7, #44	@ 0x2c
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bcb0      	pop	{r4, r5, r7}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	080029a4 	.word	0x080029a4

08000a2c <time_to_string>:

char* time_to_string(RTC_time_t *rtc_time){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	//format would be HH:MM:SS
	static char buff[9];
	buff[2] = ':';
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <time_to_string+0x48>)
 8000a36:	223a      	movs	r2, #58	@ 0x3a
 8000a38:	709a      	strb	r2, [r3, #2]
	buff[5] = ':';
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <time_to_string+0x48>)
 8000a3c:	223a      	movs	r2, #58	@ 0x3a
 8000a3e:	715a      	strb	r2, [r3, #5]
	number_to_string(rtc_time->hours, buff);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	789b      	ldrb	r3, [r3, #2]
 8000a44:	490b      	ldr	r1, [pc, #44]	@ (8000a74 <time_to_string+0x48>)
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ff98 	bl	800097c <number_to_string>
	number_to_string(rtc_time->minutes, &buff[3]);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	785b      	ldrb	r3, [r3, #1]
 8000a50:	4909      	ldr	r1, [pc, #36]	@ (8000a78 <time_to_string+0x4c>)
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff92 	bl	800097c <number_to_string>
	number_to_string(rtc_time->seconds, &buff[6]);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4907      	ldr	r1, [pc, #28]	@ (8000a7c <time_to_string+0x50>)
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ff8c 	bl	800097c <number_to_string>

	buff[8] = '\0';
 8000a64:	4b03      	ldr	r3, [pc, #12]	@ (8000a74 <time_to_string+0x48>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	721a      	strb	r2, [r3, #8]

	return buff;
 8000a6a:	4b02      	ldr	r3, [pc, #8]	@ (8000a74 <time_to_string+0x48>)
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200000b4 	.word	0x200000b4
 8000a78:	200000b7 	.word	0x200000b7
 8000a7c:	200000ba 	.word	0x200000ba

08000a80 <date_to_string>:



char* date_to_string(RTC_date_t *rtc_date){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	static char buff[9];
	buff[2] = '/';
 8000a88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <date_to_string+0x48>)
 8000a8a:	222f      	movs	r2, #47	@ 0x2f
 8000a8c:	709a      	strb	r2, [r3, #2]
	buff[5] = '/';
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <date_to_string+0x48>)
 8000a90:	222f      	movs	r2, #47	@ 0x2f
 8000a92:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date, buff);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	490b      	ldr	r1, [pc, #44]	@ (8000ac8 <date_to_string+0x48>)
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ff6e 	bl	800097c <number_to_string>
	number_to_string(rtc_date->month, &buff[3]);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	785b      	ldrb	r3, [r3, #1]
 8000aa4:	4909      	ldr	r1, [pc, #36]	@ (8000acc <date_to_string+0x4c>)
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ff68 	bl	800097c <number_to_string>
	number_to_string(rtc_date->year, &buff[6]);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	789b      	ldrb	r3, [r3, #2]
 8000ab0:	4907      	ldr	r1, [pc, #28]	@ (8000ad0 <date_to_string+0x50>)
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff ff62 	bl	800097c <number_to_string>

	buff[8] = '\0';
 8000ab8:	4b03      	ldr	r3, [pc, #12]	@ (8000ac8 <date_to_string+0x48>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	721a      	strb	r2, [r3, #8]

	return buff;
 8000abe:	4b02      	ldr	r3, [pc, #8]	@ (8000ac8 <date_to_string+0x48>)

}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200000c0 	.word	0x200000c0
 8000acc:	200000c3 	.word	0x200000c3
 8000ad0:	200000c6 	.word	0x200000c6

08000ad4 <init_systick_timer>:

void init_systick_timer(uint32_t tick_hz)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b087      	sub	sp, #28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000adc:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <init_systick_timer+0x5c>)
 8000ade:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	@ (8000b34 <init_systick_timer+0x60>)
 8000ae2:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 8000ae4:	4a14      	ldr	r2, [pc, #80]	@ (8000b38 <init_systick_timer+0x64>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aec:	3b01      	subs	r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	431a      	orrs	r2, r3
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f043 0202 	orr.w	r2, r3, #2
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f043 0204 	orr.w	r2, r3, #4
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f043 0201 	orr.w	r2, r3, #1
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	601a      	str	r2, [r3, #0]

}
 8000b26:	bf00      	nop
 8000b28:	371c      	adds	r7, #28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	e000e014 	.word	0xe000e014
 8000b34:	e000e010 	.word	0xe000e010
 8000b38:	00186a00 	.word	0x00186a00

08000b3c <main>:

int main(void){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0

	printf("RTC Testing....\n\r");
 8000b42:	4836      	ldr	r0, [pc, #216]	@ (8000c1c <main+0xe0>)
 8000b44:	f001 f83a 	bl	8001bbc <iprintf>
	RTC_time_t current_time;
	RTC_date_t current_date;
#ifndef PRINT_LCD
	printf("RTC Testing..\n");
#else
	lcd_init();
 8000b48:	f7ff fdd8 	bl	80006fc <lcd_init>

	lcd_print_string("RTC Testing...\n");
 8000b4c:	4834      	ldr	r0, [pc, #208]	@ (8000c20 <main+0xe4>)
 8000b4e:	f7ff fdc3 	bl	80006d8 <lcd_print_string>
	mdelay(200);
 8000b52:	20c8      	movs	r0, #200	@ 0xc8
 8000b54:	f7ff fee6 	bl	8000924 <mdelay>

	lcd_display_clear();
 8000b58:	f7ff fe92 	bl	8000880 <lcd_display_clear>
	lcd_display_return_home();
 8000b5c:	f7ff fe9a 	bl	8000894 <lcd_display_return_home>
#endif

	if(ds1307_init()){
 8000b60:	f7ff fb8e 	bl	8000280 <ds1307_init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d004      	beq.n	8000b74 <main+0x38>
		printf("RTC initialization failed....\n");
 8000b6a:	482e      	ldr	r0, [pc, #184]	@ (8000c24 <main+0xe8>)
 8000b6c:	f001 f88e 	bl	8001c8c <puts>
		while(1);
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <main+0x34>
	}
	init_systick_timer(1);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff ffad 	bl	8000ad4 <init_systick_timer>

	current_date.day = SUNDAY;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	71fb      	strb	r3, [r7, #7]
	current_date.date = 12;
 8000b7e:	230c      	movs	r3, #12
 8000b80:	713b      	strb	r3, [r7, #4]
	current_date.month = 1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	717b      	strb	r3, [r7, #5]
	current_date.year = 25;
 8000b86:	2319      	movs	r3, #25
 8000b88:	71bb      	strb	r3, [r7, #6]

	current_time.hours = 2;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	72bb      	strb	r3, [r7, #10]
	current_time.minutes = 42;
 8000b8e:	232a      	movs	r3, #42	@ 0x2a
 8000b90:	727b      	strb	r3, [r7, #9]
	current_time.seconds = 25;
 8000b92:	2319      	movs	r3, #25
 8000b94:	723b      	strb	r3, [r7, #8]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 8000b96:	2301      	movs	r3, #1
 8000b98:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_date(&current_date);
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fc1f 	bl	80003e0 <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fb88 	bl	80002bc <ds1307_set_current_time>

	//init_systick_timer(1);

	ds1307_get_current_date(&current_date);
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fc46 	bl	8000440 <ds1307_get_current_date>
	ds1307_get_current_time(&current_time);
 8000bb4:	f107 0308 	add.w	r3, r7, #8
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fbc8 	bl	800034e <ds1307_get_current_time>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 8000bbe:	7afb      	ldrb	r3, [r7, #11]
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d013      	beq.n	8000bec <main+0xb0>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8000bc4:	7afb      	ldrb	r3, [r7, #11]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <main+0x92>
 8000bca:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <main+0xec>)
 8000bcc:	e000      	b.n	8000bd0 <main+0x94>
 8000bce:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <main+0xf0>)
 8000bd0:	60fb      	str	r3, [r7, #12]

#ifndef PRINT_LCD
		printf("Current Time = %s %s\n", time_to_string(&current_time), am_pm);
#else
		lcd_print_string(time_to_string(&current_time));
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff28 	bl	8000a2c <time_to_string>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fd7a 	bl	80006d8 <lcd_print_string>
		lcd_print_string(am_pm);
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f7ff fd77 	bl	80006d8 <lcd_print_string>
 8000bea:	e008      	b.n	8000bfe <main+0xc2>

#ifndef PRINT_LCD
		printf("Current Time = %s\n", time_to_string(&current_time));
#else
		//lcd_set_cursor(2, 1);
		lcd_print_string(time_to_string(&current_time));
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff1b 	bl	8000a2c <time_to_string>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fd6d 	bl	80006d8 <lcd_print_string>
	}

#ifndef PRINT_LCD
		printf("Current Date = %s <%s>\n", date_to_string(&current_date), get_day_of_week(current_date.day));
#else
		lcd_set_cursor(2, 1);
 8000bfe:	2101      	movs	r1, #1
 8000c00:	2002      	movs	r0, #2
 8000c02:	f7ff fe51 	bl	80008a8 <lcd_set_cursor>
		lcd_print_string(date_to_string(&current_date));
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff39 	bl	8000a80 <date_to_string>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fd61 	bl	80006d8 <lcd_print_string>
#endif

	while(1);
 8000c16:	bf00      	nop
 8000c18:	e7fd      	b.n	8000c16 <main+0xda>
 8000c1a:	bf00      	nop
 8000c1c:	080029c0 	.word	0x080029c0
 8000c20:	080029d4 	.word	0x080029d4
 8000c24:	080029e4 	.word	0x080029e4
 8000c28:	08002a04 	.word	0x08002a04
 8000c2c:	08002a08 	.word	0x08002a08

08000c30 <SysTick_Handler>:

	return 0;
}


void SysTick_Handler(){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0

	RTC_time_t current_time;
	RTC_date_t current_date;

	ds1307_get_current_time(&current_time);
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fb87 	bl	800034e <ds1307_get_current_time>
	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 8000c40:	7afb      	ldrb	r3, [r7, #11]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d017      	beq.n	8000c76 <SysTick_Handler+0x46>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8000c46:	7afb      	ldrb	r3, [r7, #11]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SysTick_Handler+0x20>
 8000c4c:	4b21      	ldr	r3, [pc, #132]	@ (8000cd4 <SysTick_Handler+0xa4>)
 8000c4e:	e000      	b.n	8000c52 <SysTick_Handler+0x22>
 8000c50:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <SysTick_Handler+0xa8>)
 8000c52:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current Time = %s %s\n", time_to_string(&current_time), am_pm);
#else
		lcd_set_cursor(1, 1);
 8000c54:	2101      	movs	r1, #1
 8000c56:	2001      	movs	r0, #1
 8000c58:	f7ff fe26 	bl	80008a8 <lcd_set_cursor>
		lcd_print_string(time_to_string(&current_time));
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fee3 	bl	8000a2c <time_to_string>
 8000c66:	4603      	mov	r3, r0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fd35 	bl	80006d8 <lcd_print_string>
		lcd_print_string(am_pm);
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f7ff fd32 	bl	80006d8 <lcd_print_string>
 8000c74:	e00c      	b.n	8000c90 <SysTick_Handler+0x60>
	}else{

#ifndef PRINT_LCD
		printf("Current Time = %s\n", time_to_string(&current_time));
#else
		lcd_set_cursor(1, 1);
 8000c76:	2101      	movs	r1, #1
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff fe15 	bl	80008a8 <lcd_set_cursor>
		lcd_print_string(time_to_string(&current_time));
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fed2 	bl	8000a2c <time_to_string>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fd24 	bl	80006d8 <lcd_print_string>
#endif
	}

	ds1307_get_current_date(&current_date);
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fbd4 	bl	8000440 <ds1307_get_current_date>
#ifndef PRINT_LCD
		printf("Current Date = %s <%s>\n", date_to_string(&current_date), get_day_of_week(current_date.day));
#else
		lcd_set_cursor(2, 1);
 8000c98:	2101      	movs	r1, #1
 8000c9a:	2002      	movs	r0, #2
 8000c9c:	f7ff fe04 	bl	80008a8 <lcd_set_cursor>
		lcd_print_string(date_to_string(&current_date));
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff feec 	bl	8000a80 <date_to_string>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fd14 	bl	80006d8 <lcd_print_string>
		lcd_print_char('<');
 8000cb0:	203c      	movs	r0, #60	@ 0x3c
 8000cb2:	f7ff fcef 	bl	8000694 <lcd_print_char>
		lcd_print_string(get_day_of_week(current_date.day));
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fe99 	bl	80009f0 <get_day_of_week>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fd09 	bl	80006d8 <lcd_print_string>
		lcd_print_char('>');
 8000cc6:	203e      	movs	r0, #62	@ 0x3e
 8000cc8:	f7ff fce4 	bl	8000694 <lcd_print_char>
#endif

}
 8000ccc:	bf00      	nop
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	08002a04 	.word	0x08002a04
 8000cd8:	08002a08 	.word	0x08002a08

08000cdc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	e00a      	b.n	8000d04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cee:	f3af 8000 	nop.w
 8000cf2:	4601      	mov	r1, r0
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	1c5a      	adds	r2, r3, #1
 8000cf8:	60ba      	str	r2, [r7, #8]
 8000cfa:	b2ca      	uxtb	r2, r1
 8000cfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3301      	adds	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	dbf0      	blt.n	8000cee <_read+0x12>
  }

  return len;
 8000d0c:	687b      	ldr	r3, [r7, #4]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	60f8      	str	r0, [r7, #12]
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	e009      	b.n	8000d3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	60ba      	str	r2, [r7, #8]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	dbf1      	blt.n	8000d28 <_write+0x12>
  }
  return len;
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <_close>:

int _close(int file)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d74:	605a      	str	r2, [r3, #4]
  return 0;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr

08000d82 <_isatty>:

int _isatty(int file)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b085      	sub	sp, #20
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
	...

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	@ (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	@ (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f001 f882 	bl	8001ee8 <__errno>
 8000de4:	4603      	mov	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a05      	ldr	r2, [pc, #20]	@ (8000e14 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20020000 	.word	0x20020000
 8000e10:	00000400 	.word	0x00000400
 8000e14:	200000cc 	.word	0x200000cc
 8000e18:	20000220 	.word	0x20000220

08000e1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e1c:	480d      	ldr	r0, [pc, #52]	@ (8000e54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e20:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	@ (8000e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	@ (8000e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <LoopForever+0xe>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e68 <LoopForever+0x16>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e4a:	f001 f853 	bl	8001ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e4e:	f7ff fe75 	bl	8000b3c <main>

08000e52 <LoopForever>:

LoopForever:
  b LoopForever
 8000e52:	e7fe      	b.n	8000e52 <LoopForever>
  ldr   r0, =_estack
 8000e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e60:	08002a50 	.word	0x08002a50
  ldr r2, =_sbss
 8000e64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e68:	2000021c 	.word	0x2000021c

08000e6c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC_IRQHandler>
	...

08000e70 <GPIO_PeriClkControl>:
 *
 * @Note					->
 *
 */

void GPIO_PeriClkControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d162      	bne.n	8000f48 <GPIO_PeriClkControl+0xd8>
		if(pGPIOx == GPIOA){
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a64      	ldr	r2, [pc, #400]	@ (8001018 <GPIO_PeriClkControl+0x1a8>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d106      	bne.n	8000e98 <GPIO_PeriClkControl+0x28>
			GPIOA_PCLK_EN();
 8000e8a:	4b64      	ldr	r3, [pc, #400]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a63      	ldr	r2, [pc, #396]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
			GPIOH_PCLK_DI();
		}else if(pGPIOx == GPIOI){
			GPIOI_PCLK_DI();
		}
	}
}
 8000e96:	e0b9      	b.n	800100c <GPIO_PeriClkControl+0x19c>
		}else if(pGPIOx == GPIOB){
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a61      	ldr	r2, [pc, #388]	@ (8001020 <GPIO_PeriClkControl+0x1b0>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d106      	bne.n	8000eae <GPIO_PeriClkControl+0x3e>
			GPIOB_PCLK_EN();
 8000ea0:	4b5e      	ldr	r3, [pc, #376]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea4:	4a5d      	ldr	r2, [pc, #372]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000ea6:	f043 0302 	orr.w	r3, r3, #2
 8000eaa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000eac:	e0ae      	b.n	800100c <GPIO_PeriClkControl+0x19c>
		}else if(pGPIOx == GPIOC){
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a5c      	ldr	r2, [pc, #368]	@ (8001024 <GPIO_PeriClkControl+0x1b4>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d106      	bne.n	8000ec4 <GPIO_PeriClkControl+0x54>
			GPIOC_PCLK_EN();
 8000eb6:	4b59      	ldr	r3, [pc, #356]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a58      	ldr	r2, [pc, #352]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ec2:	e0a3      	b.n	800100c <GPIO_PeriClkControl+0x19c>
		}else if(pGPIOx == GPIOD){
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a58      	ldr	r2, [pc, #352]	@ (8001028 <GPIO_PeriClkControl+0x1b8>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d106      	bne.n	8000eda <GPIO_PeriClkControl+0x6a>
			GPIOD_PCLK_EN();
 8000ecc:	4b53      	ldr	r3, [pc, #332]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed0:	4a52      	ldr	r2, [pc, #328]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000ed2:	f043 0308 	orr.w	r3, r3, #8
 8000ed6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ed8:	e098      	b.n	800100c <GPIO_PeriClkControl+0x19c>
		}else if(pGPIOx == GPIOE){
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a53      	ldr	r2, [pc, #332]	@ (800102c <GPIO_PeriClkControl+0x1bc>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d106      	bne.n	8000ef0 <GPIO_PeriClkControl+0x80>
			GPIOE_PCLK_EN();
 8000ee2:	4b4e      	ldr	r3, [pc, #312]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	4a4d      	ldr	r2, [pc, #308]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000ee8:	f043 0310 	orr.w	r3, r3, #16
 8000eec:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000eee:	e08d      	b.n	800100c <GPIO_PeriClkControl+0x19c>
		}else if(pGPIOx == GPIOF){
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a4f      	ldr	r2, [pc, #316]	@ (8001030 <GPIO_PeriClkControl+0x1c0>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d106      	bne.n	8000f06 <GPIO_PeriClkControl+0x96>
			GPIOF_PCLK_EN();
 8000ef8:	4b48      	ldr	r3, [pc, #288]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efc:	4a47      	ldr	r2, [pc, #284]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000efe:	f043 0320 	orr.w	r3, r3, #32
 8000f02:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f04:	e082      	b.n	800100c <GPIO_PeriClkControl+0x19c>
		}else if(pGPIOx == GPIOG){
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4a      	ldr	r2, [pc, #296]	@ (8001034 <GPIO_PeriClkControl+0x1c4>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d106      	bne.n	8000f1c <GPIO_PeriClkControl+0xac>
			GPIOG_PCLK_EN();
 8000f0e:	4b43      	ldr	r3, [pc, #268]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a42      	ldr	r2, [pc, #264]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000f14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f1a:	e077      	b.n	800100c <GPIO_PeriClkControl+0x19c>
		}else if(pGPIOx == GPIOH){
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a46      	ldr	r2, [pc, #280]	@ (8001038 <GPIO_PeriClkControl+0x1c8>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d106      	bne.n	8000f32 <GPIO_PeriClkControl+0xc2>
			GPIOH_PCLK_EN();
 8000f24:	4b3d      	ldr	r3, [pc, #244]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f28:	4a3c      	ldr	r2, [pc, #240]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f2e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f30:	e06c      	b.n	800100c <GPIO_PeriClkControl+0x19c>
		}else if(pGPIOx == GPIOI){
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a41      	ldr	r2, [pc, #260]	@ (800103c <GPIO_PeriClkControl+0x1cc>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d168      	bne.n	800100c <GPIO_PeriClkControl+0x19c>
			GPIOI_PCLK_EN();
 8000f3a:	4b38      	ldr	r3, [pc, #224]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	4a37      	ldr	r2, [pc, #220]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f44:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f46:	e061      	b.n	800100c <GPIO_PeriClkControl+0x19c>
		if(pGPIOx == GPIOA){
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a33      	ldr	r2, [pc, #204]	@ (8001018 <GPIO_PeriClkControl+0x1a8>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d106      	bne.n	8000f5e <GPIO_PeriClkControl+0xee>
			GPIOA_PCLK_DI();
 8000f50:	4b32      	ldr	r3, [pc, #200]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f54:	4a31      	ldr	r2, [pc, #196]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000f56:	f023 0301 	bic.w	r3, r3, #1
 8000f5a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f5c:	e056      	b.n	800100c <GPIO_PeriClkControl+0x19c>
		}else if(pGPIOx == GPIOB){
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a2f      	ldr	r2, [pc, #188]	@ (8001020 <GPIO_PeriClkControl+0x1b0>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d106      	bne.n	8000f74 <GPIO_PeriClkControl+0x104>
			GPIOB_PCLK_DI();
 8000f66:	4b2d      	ldr	r3, [pc, #180]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	4a2c      	ldr	r2, [pc, #176]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000f6c:	f023 0302 	bic.w	r3, r3, #2
 8000f70:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f72:	e04b      	b.n	800100c <GPIO_PeriClkControl+0x19c>
		}else if(pGPIOx == GPIOC){
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a2b      	ldr	r2, [pc, #172]	@ (8001024 <GPIO_PeriClkControl+0x1b4>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d106      	bne.n	8000f8a <GPIO_PeriClkControl+0x11a>
			GPIOC_PCLK_DI();
 8000f7c:	4b27      	ldr	r3, [pc, #156]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f80:	4a26      	ldr	r2, [pc, #152]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000f82:	f023 0304 	bic.w	r3, r3, #4
 8000f86:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f88:	e040      	b.n	800100c <GPIO_PeriClkControl+0x19c>
		}else if(pGPIOx == GPIOD){
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a26      	ldr	r2, [pc, #152]	@ (8001028 <GPIO_PeriClkControl+0x1b8>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d106      	bne.n	8000fa0 <GPIO_PeriClkControl+0x130>
			GPIOD_PCLK_DI();
 8000f92:	4b22      	ldr	r3, [pc, #136]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	4a21      	ldr	r2, [pc, #132]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000f98:	f023 0308 	bic.w	r3, r3, #8
 8000f9c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f9e:	e035      	b.n	800100c <GPIO_PeriClkControl+0x19c>
		}else if(pGPIOx == GPIOE){
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a22      	ldr	r2, [pc, #136]	@ (800102c <GPIO_PeriClkControl+0x1bc>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d106      	bne.n	8000fb6 <GPIO_PeriClkControl+0x146>
			GPIOE_PCLK_DI();
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fac:	4a1b      	ldr	r2, [pc, #108]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000fae:	f023 0310 	bic.w	r3, r3, #16
 8000fb2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000fb4:	e02a      	b.n	800100c <GPIO_PeriClkControl+0x19c>
		}else if(pGPIOx == GPIOF){
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8001030 <GPIO_PeriClkControl+0x1c0>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d106      	bne.n	8000fcc <GPIO_PeriClkControl+0x15c>
			GPIOF_PCLK_DI();
 8000fbe:	4b17      	ldr	r3, [pc, #92]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a16      	ldr	r2, [pc, #88]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000fc4:	f023 0320 	bic.w	r3, r3, #32
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000fca:	e01f      	b.n	800100c <GPIO_PeriClkControl+0x19c>
		}else if(pGPIOx == GPIOG){
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a19      	ldr	r2, [pc, #100]	@ (8001034 <GPIO_PeriClkControl+0x1c4>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d106      	bne.n	8000fe2 <GPIO_PeriClkControl+0x172>
			GPIOG_PCLK_DI();
 8000fd4:	4b11      	ldr	r3, [pc, #68]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd8:	4a10      	ldr	r2, [pc, #64]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000fda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000fde:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000fe0:	e014      	b.n	800100c <GPIO_PeriClkControl+0x19c>
		}else if(pGPIOx == GPIOH){
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a14      	ldr	r2, [pc, #80]	@ (8001038 <GPIO_PeriClkControl+0x1c8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d106      	bne.n	8000ff8 <GPIO_PeriClkControl+0x188>
			GPIOH_PCLK_DI();
 8000fea:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a0b      	ldr	r2, [pc, #44]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8000ff0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ff6:	e009      	b.n	800100c <GPIO_PeriClkControl+0x19c>
		}else if(pGPIOx == GPIOI){
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a10      	ldr	r2, [pc, #64]	@ (800103c <GPIO_PeriClkControl+0x1cc>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d105      	bne.n	800100c <GPIO_PeriClkControl+0x19c>
			GPIOI_PCLK_DI();
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001004:	4a05      	ldr	r2, [pc, #20]	@ (800101c <GPIO_PeriClkControl+0x1ac>)
 8001006:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800100a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40020000 	.word	0x40020000
 800101c:	40023800 	.word	0x40023800
 8001020:	40020400 	.word	0x40020400
 8001024:	40020800 	.word	0x40020800
 8001028:	40020c00 	.word	0x40020c00
 800102c:	40021000 	.word	0x40021000
 8001030:	40021400 	.word	0x40021400
 8001034:	40021800 	.word	0x40021800
 8001038:	40021c00 	.word	0x40021c00
 800103c:	40022000 	.word	0x40022000

08001040 <GPIO_Init>:
 *
 * @Note					->
 *
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
	GPIO_PeriClkControl(pGPIOHandle->pGPIOx, ENABLE);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2101      	movs	r1, #1
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff0c 	bl	8000e70 <GPIO_PeriClkControl>
	//1. configure the mode of the GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	795b      	ldrb	r3, [r3, #5]
 800105c:	2b03      	cmp	r3, #3
 800105e:	f200 80bf 	bhi.w	80011e0 <GPIO_Init+0x1a0>
		//non-interrupt mode
		//configuration of the mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << 2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	795b      	ldrb	r3, [r3, #5]
 8001066:	461a      	mov	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	791b      	ldrb	r3, [r3, #4]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	791b      	ldrb	r3, [r3, #4]
 800107e:	4619      	mov	r1, r3
 8001080:	2303      	movs	r3, #3
 8001082:	408b      	lsls	r3, r1
 8001084:	43db      	mvns	r3, r3
 8001086:	4619      	mov	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	400a      	ands	r2, r1
 800108e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6819      	ldr	r1, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]

		temp = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
		//2. configure the pin pupd settings
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << 2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	79db      	ldrb	r3, [r3, #7]
 80010a8:	461a      	mov	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	791b      	ldrb	r3, [r3, #4]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68da      	ldr	r2, [r3, #12]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	791b      	ldrb	r3, [r3, #4]
 80010c0:	4619      	mov	r1, r3
 80010c2:	2303      	movs	r3, #3
 80010c4:	408b      	lsls	r3, r1
 80010c6:	43db      	mvns	r3, r3
 80010c8:	4619      	mov	r1, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	400a      	ands	r2, r1
 80010d0:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68d9      	ldr	r1, [r3, #12]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	430a      	orrs	r2, r1
 80010e0:	60da      	str	r2, [r3, #12]

		temp = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
		//3. configure the pin speed
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << 2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	799b      	ldrb	r3, [r3, #6]
 80010ea:	461a      	mov	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	791b      	ldrb	r3, [r3, #4]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	791b      	ldrb	r3, [r3, #4]
 8001102:	4619      	mov	r1, r3
 8001104:	2303      	movs	r3, #3
 8001106:	408b      	lsls	r3, r1
 8001108:	43db      	mvns	r3, r3
 800110a:	4619      	mov	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	400a      	ands	r2, r1
 8001112:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6899      	ldr	r1, [r3, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	430a      	orrs	r2, r1
 8001122:	609a      	str	r2, [r3, #8]

		temp = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]

		//4. configure the op type
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	7a1b      	ldrb	r3, [r3, #8]
 800112c:	461a      	mov	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	791b      	ldrb	r3, [r3, #4]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	791b      	ldrb	r3, [r3, #4]
 8001142:	4619      	mov	r1, r3
 8001144:	2303      	movs	r3, #3
 8001146:	408b      	lsls	r3, r1
 8001148:	43db      	mvns	r3, r3
 800114a:	4619      	mov	r1, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	400a      	ands	r2, r1
 8001152:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6859      	ldr	r1, [r3, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	430a      	orrs	r2, r1
 8001162:	605a      	str	r2, [r3, #4]
		temp = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

		//5. configure the pin alt function type
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	795b      	ldrb	r3, [r3, #5]
 800116c:	2b02      	cmp	r3, #2
 800116e:	f040 80f9 	bne.w	8001364 <GPIO_Init+0x324>
			//then only configure the alternate functionality of the pin
			uint8_t temp1 = 0, temp2 = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	743b      	strb	r3, [r7, #16]
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]
			temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	791b      	ldrb	r3, [r3, #4]
 800117e:	08db      	lsrs	r3, r3, #3
 8001180:	743b      	strb	r3, [r7, #16]
			temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	791b      	ldrb	r3, [r3, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	73fb      	strb	r3, [r7, #15]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << 4* temp2);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	7c3a      	ldrb	r2, [r7, #16]
 8001192:	3208      	adds	r2, #8
 8001194:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	220f      	movs	r2, #15
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	4618      	mov	r0, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	7c3a      	ldrb	r2, [r7, #16]
 80011ac:	4001      	ands	r1, r0
 80011ae:	3208      	adds	r2, #8
 80011b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * temp2));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	7c3a      	ldrb	r2, [r7, #16]
 80011ba:	3208      	adds	r2, #8
 80011bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7a5b      	ldrb	r3, [r3, #9]
 80011c4:	461a      	mov	r2, r3
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	7c3a      	ldrb	r2, [r7, #16]
 80011d6:	4301      	orrs	r1, r0
 80011d8:	3208      	adds	r2, #8
 80011da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		//enable the exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);

	}

}
 80011de:	e0c1      	b.n	8001364 <GPIO_Init+0x324>
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	795b      	ldrb	r3, [r3, #5]
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	d117      	bne.n	8001218 <GPIO_Init+0x1d8>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80011e8:	4b60      	ldr	r3, [pc, #384]	@ (800136c <GPIO_Init+0x32c>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	7912      	ldrb	r2, [r2, #4]
 80011f0:	4611      	mov	r1, r2
 80011f2:	2201      	movs	r2, #1
 80011f4:	408a      	lsls	r2, r1
 80011f6:	4611      	mov	r1, r2
 80011f8:	4a5c      	ldr	r2, [pc, #368]	@ (800136c <GPIO_Init+0x32c>)
 80011fa:	430b      	orrs	r3, r1
 80011fc:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80011fe:	4b5b      	ldr	r3, [pc, #364]	@ (800136c <GPIO_Init+0x32c>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	7912      	ldrb	r2, [r2, #4]
 8001206:	4611      	mov	r1, r2
 8001208:	2201      	movs	r2, #1
 800120a:	408a      	lsls	r2, r1
 800120c:	43d2      	mvns	r2, r2
 800120e:	4611      	mov	r1, r2
 8001210:	4a56      	ldr	r2, [pc, #344]	@ (800136c <GPIO_Init+0x32c>)
 8001212:	400b      	ands	r3, r1
 8001214:	6093      	str	r3, [r2, #8]
 8001216:	e04d      	b.n	80012b4 <GPIO_Init+0x274>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	795b      	ldrb	r3, [r3, #5]
 800121c:	2b05      	cmp	r3, #5
 800121e:	d117      	bne.n	8001250 <GPIO_Init+0x210>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001220:	4b52      	ldr	r3, [pc, #328]	@ (800136c <GPIO_Init+0x32c>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	7912      	ldrb	r2, [r2, #4]
 8001228:	4611      	mov	r1, r2
 800122a:	2201      	movs	r2, #1
 800122c:	408a      	lsls	r2, r1
 800122e:	4611      	mov	r1, r2
 8001230:	4a4e      	ldr	r2, [pc, #312]	@ (800136c <GPIO_Init+0x32c>)
 8001232:	430b      	orrs	r3, r1
 8001234:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001236:	4b4d      	ldr	r3, [pc, #308]	@ (800136c <GPIO_Init+0x32c>)
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	7912      	ldrb	r2, [r2, #4]
 800123e:	4611      	mov	r1, r2
 8001240:	2201      	movs	r2, #1
 8001242:	408a      	lsls	r2, r1
 8001244:	43d2      	mvns	r2, r2
 8001246:	4611      	mov	r1, r2
 8001248:	4a48      	ldr	r2, [pc, #288]	@ (800136c <GPIO_Init+0x32c>)
 800124a:	400b      	ands	r3, r1
 800124c:	60d3      	str	r3, [r2, #12]
 800124e:	e031      	b.n	80012b4 <GPIO_Init+0x274>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	795b      	ldrb	r3, [r3, #5]
 8001254:	2b06      	cmp	r3, #6
 8001256:	d12d      	bne.n	80012b4 <GPIO_Init+0x274>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001258:	4b44      	ldr	r3, [pc, #272]	@ (800136c <GPIO_Init+0x32c>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	7912      	ldrb	r2, [r2, #4]
 8001260:	4611      	mov	r1, r2
 8001262:	2201      	movs	r2, #1
 8001264:	408a      	lsls	r2, r1
 8001266:	4611      	mov	r1, r2
 8001268:	4a40      	ldr	r2, [pc, #256]	@ (800136c <GPIO_Init+0x32c>)
 800126a:	430b      	orrs	r3, r1
 800126c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800126e:	4b3f      	ldr	r3, [pc, #252]	@ (800136c <GPIO_Init+0x32c>)
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	7912      	ldrb	r2, [r2, #4]
 8001276:	4611      	mov	r1, r2
 8001278:	2201      	movs	r2, #1
 800127a:	408a      	lsls	r2, r1
 800127c:	4611      	mov	r1, r2
 800127e:	4a3b      	ldr	r2, [pc, #236]	@ (800136c <GPIO_Init+0x32c>)
 8001280:	430b      	orrs	r3, r1
 8001282:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001284:	4b39      	ldr	r3, [pc, #228]	@ (800136c <GPIO_Init+0x32c>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	7912      	ldrb	r2, [r2, #4]
 800128c:	4611      	mov	r1, r2
 800128e:	2201      	movs	r2, #1
 8001290:	408a      	lsls	r2, r1
 8001292:	43d2      	mvns	r2, r2
 8001294:	4611      	mov	r1, r2
 8001296:	4a35      	ldr	r2, [pc, #212]	@ (800136c <GPIO_Init+0x32c>)
 8001298:	400b      	ands	r3, r1
 800129a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800129c:	4b33      	ldr	r3, [pc, #204]	@ (800136c <GPIO_Init+0x32c>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	7912      	ldrb	r2, [r2, #4]
 80012a4:	4611      	mov	r1, r2
 80012a6:	2201      	movs	r2, #1
 80012a8:	408a      	lsls	r2, r1
 80012aa:	43d2      	mvns	r2, r2
 80012ac:	4611      	mov	r1, r2
 80012ae:	4a2f      	ldr	r2, [pc, #188]	@ (800136c <GPIO_Init+0x32c>)
 80012b0:	400b      	ands	r3, r1
 80012b2:	60d3      	str	r3, [r2, #12]
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	791b      	ldrb	r3, [r3, #4]
 80012b8:	089b      	lsrs	r3, r3, #2
 80012ba:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	791b      	ldrb	r3, [r3, #4]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a29      	ldr	r2, [pc, #164]	@ (8001370 <GPIO_Init+0x330>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d032      	beq.n	8001336 <GPIO_Init+0x2f6>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a27      	ldr	r2, [pc, #156]	@ (8001374 <GPIO_Init+0x334>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d02b      	beq.n	8001332 <GPIO_Init+0x2f2>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a26      	ldr	r2, [pc, #152]	@ (8001378 <GPIO_Init+0x338>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d024      	beq.n	800132e <GPIO_Init+0x2ee>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a24      	ldr	r2, [pc, #144]	@ (800137c <GPIO_Init+0x33c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d01d      	beq.n	800132a <GPIO_Init+0x2ea>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a23      	ldr	r2, [pc, #140]	@ (8001380 <GPIO_Init+0x340>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d016      	beq.n	8001326 <GPIO_Init+0x2e6>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a21      	ldr	r2, [pc, #132]	@ (8001384 <GPIO_Init+0x344>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d00f      	beq.n	8001322 <GPIO_Init+0x2e2>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a20      	ldr	r2, [pc, #128]	@ (8001388 <GPIO_Init+0x348>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d008      	beq.n	800131e <GPIO_Init+0x2de>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a1e      	ldr	r2, [pc, #120]	@ (800138c <GPIO_Init+0x34c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d101      	bne.n	800131a <GPIO_Init+0x2da>
 8001316:	2307      	movs	r3, #7
 8001318:	e00e      	b.n	8001338 <GPIO_Init+0x2f8>
 800131a:	2300      	movs	r3, #0
 800131c:	e00c      	b.n	8001338 <GPIO_Init+0x2f8>
 800131e:	2306      	movs	r3, #6
 8001320:	e00a      	b.n	8001338 <GPIO_Init+0x2f8>
 8001322:	2305      	movs	r3, #5
 8001324:	e008      	b.n	8001338 <GPIO_Init+0x2f8>
 8001326:	2304      	movs	r3, #4
 8001328:	e006      	b.n	8001338 <GPIO_Init+0x2f8>
 800132a:	2303      	movs	r3, #3
 800132c:	e004      	b.n	8001338 <GPIO_Init+0x2f8>
 800132e:	2302      	movs	r3, #2
 8001330:	e002      	b.n	8001338 <GPIO_Init+0x2f8>
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <GPIO_Init+0x2f8>
 8001336:	2300      	movs	r3, #0
 8001338:	747b      	strb	r3, [r7, #17]
		SYSCFG->EXTICR[temp1] = (portcode << (temp2 * 4));
 800133a:	7c7a      	ldrb	r2, [r7, #17]
 800133c:	7cbb      	ldrb	r3, [r7, #18]
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	fa02 f103 	lsl.w	r1, r2, r3
 8001344:	4a12      	ldr	r2, [pc, #72]	@ (8001390 <GPIO_Init+0x350>)
 8001346:	7cfb      	ldrb	r3, [r7, #19]
 8001348:	3302      	adds	r3, #2
 800134a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800134e:	4b07      	ldr	r3, [pc, #28]	@ (800136c <GPIO_Init+0x32c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	7912      	ldrb	r2, [r2, #4]
 8001356:	4611      	mov	r1, r2
 8001358:	2201      	movs	r2, #1
 800135a:	408a      	lsls	r2, r1
 800135c:	4611      	mov	r1, r2
 800135e:	4a03      	ldr	r2, [pc, #12]	@ (800136c <GPIO_Init+0x32c>)
 8001360:	430b      	orrs	r3, r1
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	4000b800 	.word	0x4000b800
 8001370:	40020000 	.word	0x40020000
 8001374:	40020400 	.word	0x40020400
 8001378:	40020800 	.word	0x40020800
 800137c:	40020c00 	.word	0x40020c00
 8001380:	40021000 	.word	0x40021000
 8001384:	40021400 	.word	0x40021400
 8001388:	40021800 	.word	0x40021800
 800138c:	40021c00 	.word	0x40021c00
 8001390:	4000b400 	.word	0x4000b400

08001394 <GPIO_WriteToOutputPin>:
 * @Note					->
 *
 */


void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t value){
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	70fb      	strb	r3, [r7, #3]
 80013a0:	4613      	mov	r3, r2
 80013a2:	70bb      	strb	r3, [r7, #2]
	if(value == GPIO_PIN_SET){
 80013a4:	78bb      	ldrb	r3, [r7, #2]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d109      	bne.n	80013be <GPIO_WriteToOutputPin+0x2a>
		//write 1 to the bit field of ODR corresponding to the pin number
		pGPIOx->ODR |= (1 << PinNumber);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	78fa      	ldrb	r2, [r7, #3]
 80013b0:	2101      	movs	r1, #1
 80013b2:	fa01 f202 	lsl.w	r2, r1, r2
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	615a      	str	r2, [r3, #20]
	}else{
		//write 0 to the bit field of ODR corresponding to the pin number
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 80013bc:	e009      	b.n	80013d2 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	78fa      	ldrb	r2, [r7, #3]
 80013c4:	2101      	movs	r1, #1
 80013c6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ca:	43d2      	mvns	r2, r2
 80013cc:	401a      	ands	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	615a      	str	r2, [r3, #20]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <I2C_GenerateStartCondition>:

/*************************************************************************************************
 	 	 	 	 	 	 	 	 	 |Private Helper functions|
**************************************************************************************************/

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	//set the stop bit in cr1
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	601a      	str	r2, [r3, #0]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr

080013fa <I2C_GetFlagStatus>:

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName){
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
	//test i2c related flags generated in sr1 with flagname
	if(pI2Cx->SR1 & FlagName){
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	695a      	ldr	r2, [r3, #20]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	4013      	ands	r3, r2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8001410:	2301      	movs	r3, #1
 8001412:	e000      	b.n	8001416 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_Handle_t *pI2CHandle, uint8_t SlaveAddr){
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
	//first left shift the slave address by 1, because 0th bit is meant for R/W bit
	SlaveAddr = SlaveAddr << 1;
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	70fb      	strb	r3, [r7, #3]
	//now clears the 0th bit of SlaveAddr
	SlaveAddr &= ~(1);
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	f023 0301 	bic.w	r3, r3, #1
 8001438:	70fb      	strb	r3, [r7, #3]
	//now just loads the slave addr in DR register of I2C
	pI2CHandle->pI2Cx->SR1 = SlaveAddr;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	78fa      	ldrb	r2, [r7, #3]
 8001440:	615a      	str	r2, [r3, #20]
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_Handle_t *pI2CHandle, uint8_t SlaveAddr){
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	70fb      	strb	r3, [r7, #3]
	//first left shift the slave address by 1, because 0th bit is meant for R/W bit
	SlaveAddr = SlaveAddr << 1;
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	70fb      	strb	r3, [r7, #3]
	//now clears the 0th bit of SlaveAddr
	SlaveAddr |= 1;
 800145e:	78fb      	ldrb	r3, [r7, #3]
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	70fb      	strb	r3, [r7, #3]
	//now just loads the slave addr in DR register of I2C
	pI2CHandle->pI2Cx->SR1 = SlaveAddr;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	78fa      	ldrb	r2, [r7, #3]
 800146c:	615a      	str	r2, [r3, #20]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <I2C_ClearAddrFlag>:

static void I2C_ClearAddrFlag(I2C_Handle_t *pI2CHandle){
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	uint8_t dummyRead;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d01d      	beq.n	80014ca <I2C_ClearAddrFlag+0x52>
		//device is in master mode
		//check for the i2c state
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7f1b      	ldrb	r3, [r3, #28]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d110      	bne.n	80014b8 <I2C_ClearAddrFlag+0x40>
			//check the rx size
			if(pI2CHandle->RxSize == 1){
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d11d      	bne.n	80014da <I2C_ClearAddrFlag+0x62>
				//disable the acking
				I2C_ManageAcking(pI2CHandle, I2C_ACK_DISABLE);
 800149e:	2100      	movs	r1, #0
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 fa20 	bl	80018e6 <I2C_ManageAcking>
				//clear the addr flag, to clear read SR1, followed by read SR2
				dummyRead = pI2CHandle->pI2Cx->SR1;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	73fb      	strb	r3, [r7, #15]
				dummyRead = pI2CHandle->pI2Cx->SR2;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	73fb      	strb	r3, [r7, #15]
		dummyRead = pI2CHandle->pI2Cx->SR1;
		dummyRead = pI2CHandle->pI2Cx->SR2;
		(void)dummyRead;
	}

}
 80014b6:	e010      	b.n	80014da <I2C_ClearAddrFlag+0x62>
			dummyRead = pI2CHandle->pI2Cx->SR1;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	73fb      	strb	r3, [r7, #15]
			dummyRead = pI2CHandle->pI2Cx->SR2;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	73fb      	strb	r3, [r7, #15]
}
 80014c8:	e007      	b.n	80014da <I2C_ClearAddrFlag+0x62>
		dummyRead = pI2CHandle->pI2Cx->SR1;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	73fb      	strb	r3, [r7, #15]
		dummyRead = pI2CHandle->pI2Cx->SR2;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	73fb      	strb	r3, [r7, #15]
}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <I2C_PeriClkControl>:
 * @Note					->
 *
 */


void I2C_PeriClkControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	70fb      	strb	r3, [r7, #3]
	//first checks the commands if it is enable
	if(EnorDi == ENABLE){
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d120      	bne.n	8001538 <I2C_PeriClkControl+0x54>
		//again checks the which i2c peripheral it is
		if(pI2Cx == I2C1){
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a22      	ldr	r2, [pc, #136]	@ (8001584 <I2C_PeriClkControl+0xa0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d106      	bne.n	800150c <I2C_PeriClkControl+0x28>
			//enable the clock for i2c1
			I2C1_PCLK_EN();
 80014fe:	4b22      	ldr	r3, [pc, #136]	@ (8001588 <I2C_PeriClkControl+0xa4>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	4a21      	ldr	r2, [pc, #132]	@ (8001588 <I2C_PeriClkControl+0xa4>)
 8001504:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001508:	6413      	str	r3, [r2, #64]	@ 0x40
			I2C2_PCLK_DI();
		}else if(pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}
 800150a:	e035      	b.n	8001578 <I2C_PeriClkControl+0x94>
		}else if(pI2Cx == I2C2){
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a1f      	ldr	r2, [pc, #124]	@ (800158c <I2C_PeriClkControl+0xa8>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d106      	bne.n	8001522 <I2C_PeriClkControl+0x3e>
			I2C2_PCLK_EN();
 8001514:	4b1c      	ldr	r3, [pc, #112]	@ (8001588 <I2C_PeriClkControl+0xa4>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001518:	4a1b      	ldr	r2, [pc, #108]	@ (8001588 <I2C_PeriClkControl+0xa4>)
 800151a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800151e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001520:	e02a      	b.n	8001578 <I2C_PeriClkControl+0x94>
		}else if(pI2Cx == I2C3){
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a1a      	ldr	r2, [pc, #104]	@ (8001590 <I2C_PeriClkControl+0xac>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d126      	bne.n	8001578 <I2C_PeriClkControl+0x94>
			I2C3_PCLK_EN();
 800152a:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <I2C_PeriClkControl+0xa4>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	4a16      	ldr	r2, [pc, #88]	@ (8001588 <I2C_PeriClkControl+0xa4>)
 8001530:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001534:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001536:	e01f      	b.n	8001578 <I2C_PeriClkControl+0x94>
		if(pI2Cx == I2C1){
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a12      	ldr	r2, [pc, #72]	@ (8001584 <I2C_PeriClkControl+0xa0>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d106      	bne.n	800154e <I2C_PeriClkControl+0x6a>
			I2C1_PCLK_DI();
 8001540:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <I2C_PeriClkControl+0xa4>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001544:	4a10      	ldr	r2, [pc, #64]	@ (8001588 <I2C_PeriClkControl+0xa4>)
 8001546:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800154a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800154c:	e014      	b.n	8001578 <I2C_PeriClkControl+0x94>
		}else if(pI2Cx == I2C2){
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a0e      	ldr	r2, [pc, #56]	@ (800158c <I2C_PeriClkControl+0xa8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d106      	bne.n	8001564 <I2C_PeriClkControl+0x80>
			I2C2_PCLK_DI();
 8001556:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <I2C_PeriClkControl+0xa4>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	4a0b      	ldr	r2, [pc, #44]	@ (8001588 <I2C_PeriClkControl+0xa4>)
 800155c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001560:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001562:	e009      	b.n	8001578 <I2C_PeriClkControl+0x94>
		}else if(pI2Cx == I2C3){
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a0a      	ldr	r2, [pc, #40]	@ (8001590 <I2C_PeriClkControl+0xac>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d105      	bne.n	8001578 <I2C_PeriClkControl+0x94>
			I2C3_PCLK_DI();
 800156c:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <I2C_PeriClkControl+0xa4>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001570:	4a05      	ldr	r2, [pc, #20]	@ (8001588 <I2C_PeriClkControl+0xa4>)
 8001572:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001576:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40005400 	.word	0x40005400
 8001588:	40023800 	.word	0x40023800
 800158c:	40005800 	.word	0x40005800
 8001590:	40005c00 	.word	0x40005c00

08001594 <I2C_Init>:
 * @Note					->
 *
 */


void I2C_Init(I2C_Handle_t *pI2CHandle){
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	I2C_PeriClkControl(pI2CHandle->pI2Cx, ENABLE);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2101      	movs	r1, #1
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff9e 	bl	80014e4 <I2C_PeriClkControl>

	uint32_t tempreg = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
	//1. first configure the ack control bit in cr1
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << I2C_CR1_ACK;	//10th bit cr1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7a5b      	ldrb	r3, [r3, #9]
 80015b0:	029b      	lsls	r3, r3, #10
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]
	//store the tempreg value in CR1 register
	pI2CHandle->pI2Cx->CR1 |= tempreg;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6819      	ldr	r1, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]
	//2. to configure the seriel clock speed needs to calculate the apb1 bus clock value
	//2. to do this i need to create seperate function for that now we have value of clock so that
	//configure FREQ field of CR2 register
	tempreg = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
	//get the clock value from above function and divide it 100000 to get the value 16
	tempreg = RCC_GetPCLK1Value()/100000U;
 80015cc:	f000 f9dc 	bl	8001988 <RCC_GetPCLK1Value>
 80015d0:	4603      	mov	r3, r0
 80015d2:	095b      	lsrs	r3, r3, #5
 80015d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001710 <I2C_Init+0x17c>)
 80015d6:	fba2 2303 	umull	r2, r3, r2, r3
 80015da:	09db      	lsrs	r3, r3, #7
 80015dc:	60fb      	str	r3, [r7, #12]
	//store the value in CR2 Freq field
	pI2CHandle->pI2Cx->CR2 |= (tempreg & 0x3F); //bit 0 to 5 is for freq field
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6859      	ldr	r1, [r3, #4]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	605a      	str	r2, [r3, #4]
	//configure the OAR register for this
	tempreg = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1; //because 0th bit is reserve for R/W bit
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	7a1b      	ldrb	r3, [r3, #8]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	4313      	orrs	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
	//3. this is important to do as per reference manual
	tempreg |= (1 << 14);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001608:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 |= tempreg;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6899      	ldr	r1, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	430a      	orrs	r2, r1
 8001618:	609a      	str	r2, [r3, #8]

	//4. CCR register
	uint16_t ccr_value = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
	//checks the speed of the i2c serial
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4a3b      	ldr	r2, [pc, #236]	@ (8001714 <I2C_Init+0x180>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d810      	bhi.n	800164e <I2C_Init+0xba>
		//speed mode is standard mode means 100khz = 100000
		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 800162c:	f000 f9ac 	bl	8001988 <RCC_GetPCLK1Value>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	fbb2 f3f3 	udiv	r3, r2, r3
 800163e:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8001640:	897b      	ldrh	r3, [r7, #10]
 8001642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	e02e      	b.n	80016ac <I2C_Init+0x118>

	}else{
		//for fast mode, i have to set the 15 bit field, so the fast mode is activated
		//then program the duty cycle bit field according to reference manual
		tempreg |= (1 << 15);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001654:	60fb      	str	r3, [r7, #12]
		tempreg |= pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	895b      	ldrh	r3, [r3, #10]
 800165a:	039b      	lsls	r3, r3, #14
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4313      	orrs	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]

		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	895b      	ldrh	r3, [r3, #10]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10c      	bne.n	8001684 <I2C_Init+0xf0>
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 800166a:	f000 f98d 	bl	8001988 <RCC_GetPCLK1Value>
 800166e:	4603      	mov	r3, r0
 8001670:	4619      	mov	r1, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001680:	817b      	strh	r3, [r7, #10]
 8001682:	e00d      	b.n	80016a0 <I2C_Init+0x10c>
		}else{
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8001684:	f000 f980 	bl	8001988 <RCC_GetPCLK1Value>
 8001688:	4603      	mov	r3, r0
 800168a:	4619      	mov	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	009a      	lsls	r2, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	fbb1 f3f3 	udiv	r3, r1, r3
 800169e:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 80016a0:	897b      	ldrh	r3, [r7, #10]
 80016a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->CCR |= tempreg;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	69d9      	ldr	r1, [r3, #28]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	61da      	str	r2, [r3, #28]
	//6. TRISE calculation
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	4a14      	ldr	r2, [pc, #80]	@ (8001714 <I2C_Init+0x180>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d80c      	bhi.n	80016e0 <I2C_Init+0x14c>
		//speed mode is standard mode means 100khz = 100000
		tempreg = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 80016ca:	f000 f95d 	bl	8001988 <RCC_GetPCLK1Value>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <I2C_Init+0x184>)
 80016d4:	fba3 2302 	umull	r2, r3, r3, r2
 80016d8:	0c9b      	lsrs	r3, r3, #18
 80016da:	3301      	adds	r3, #1
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	e00d      	b.n	80016fc <I2C_Init+0x168>


	}else{
		//fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 100000000U) + 1;
 80016e0:	f000 f952 	bl	8001988 <RCC_GetPCLK1Value>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80016ea:	fb02 f303 	mul.w	r3, r2, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b0a      	ldr	r3, [pc, #40]	@ (800171c <I2C_Init+0x188>)
 80016f2:	fba3 2302 	umull	r2, r3, r3, r2
 80016f6:	0e5b      	lsrs	r3, r3, #25
 80016f8:	3301      	adds	r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]

	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001706:	621a      	str	r2, [r3, #32]
}
 8001708:	bf00      	nop
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	0a7c5ac5 	.word	0x0a7c5ac5
 8001714:	000186a0 	.word	0x000186a0
 8001718:	431bde83 	.word	0x431bde83
 800171c:	55e63b89 	.word	0x55e63b89

08001720 <I2C_MasterSendData>:
 *
 * @Note					->
 *
 */

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr){
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	70fb      	strb	r3, [r7, #3]
	//1. Generate the Start Condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fe52 	bl	80013dc <I2C_GenerateStartCondition>

	//2. Confirm that start generation is completed by checking the SB flag in the SR1
	//	Note: Untill SB is cleared, clock is stretched(pulled to low)
	//so wait untill SB bit is cleared
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)));
 8001738:	bf00      	nop
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2101      	movs	r1, #1
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fe5a 	bl	80013fa <I2C_GetFlagStatus>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f6      	beq.n	800173a <I2C_MasterSendData+0x1a>

	//3. Execute the Address phase with R/W bit (0th bit) of slave addr
	I2C_ExecuteAddressPhaseWrite(pI2CHandle, SlaveAddr);
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	4619      	mov	r1, r3
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f7ff fe65 	bl	8001420 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirms that address phase is completed, by checking the addr flag in SR1
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)));
 8001756:	bf00      	nop
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2102      	movs	r1, #2
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fe4b 	bl	80013fa <I2C_GetFlagStatus>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f6      	beq.n	8001758 <I2C_MasterSendData+0x38>

	//5. clears the addr flag according to it's sequence
	//Note: untill addr is cleared, scl is stretched(pulled to low)
	I2C_ClearAddrFlag(pI2CHandle);
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f7ff fe84 	bl	8001478 <I2C_ClearAddrFlag>

	//6. send the data untill length becomes 0
	while(Len > 0){
 8001770:	e014      	b.n	800179c <I2C_MasterSendData+0x7c>
		//wait untill txe is cleared
		while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)));
 8001772:	bf00      	nop
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2180      	movs	r1, #128	@ 0x80
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fe3d 	bl	80013fa <I2C_GetFlagStatus>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f6      	beq.n	8001774 <I2C_MasterSendData+0x54>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	781a      	ldrb	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	3301      	adds	r3, #1
 8001794:	60bb      	str	r3, [r7, #8]
		Len--;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3b01      	subs	r3, #1
 800179a:	607b      	str	r3, [r7, #4]
	while(Len > 0){
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1e7      	bne.n	8001772 <I2C_MasterSendData+0x52>

	//7. when length becomes 0, close the transmsission, when length becomes 0, you have to wait
	//untill the TXE flag and BTF flag is set after that only generate stop condition
	//Note: TXE = 1, BTF = 1 means SR and DR is empty, and the next transmission should begin
	//when BTF = 1, SCL will be stretched to low
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR1_TXE)));
 80017a2:	bf00      	nop
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2107      	movs	r1, #7
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fe25 	bl	80013fa <I2C_GetFlagStatus>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f6      	beq.n	80017a4 <I2C_MasterSendData+0x84>
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR1_BTF)));
 80017b6:	bf00      	nop
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2102      	movs	r1, #2
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fe1b 	bl	80013fa <I2C_GetFlagStatus>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f6      	beq.n	80017b8 <I2C_MasterSendData+0x98>

	//8. Generate the stop condition
	if(Sr == I2C_DISABLE_SR)
 80017ca:	7e3b      	ldrb	r3, [r7, #24]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d104      	bne.n	80017da <I2C_MasterSendData+0xba>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 f8c0 	bl	800195a <I2C_GenerateStopCondition>
}
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <I2C_MasterReceiveData>:
 *
 * @Note					->
 *
 */

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr){
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	70fb      	strb	r3, [r7, #3]

	//1. Generate the start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fdf1 	bl	80013dc <I2C_GenerateStartCondition>

	//2. Confirm start condition by checking the sb flag, untill sb is cleared clock is stretched
	//to low, wait untill Sb flag is cleared
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)));
 80017fa:	bf00      	nop
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2101      	movs	r1, #1
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fdf9 	bl	80013fa <I2C_GetFlagStatus>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f6      	beq.n	80017fc <I2C_MasterReceiveData+0x1a>

	//3. Execute the slave address phase with r/w bit as 1 because it is read operation
	I2C_ExecuteAddressPhaseRead(pI2CHandle, SlaveAddr);
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	4619      	mov	r1, r3
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f7ff fe1a 	bl	800144c <I2C_ExecuteAddressPhaseRead>

	//4. Confirm that address phase is successfully executed by checking the addr flag in sr1
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)));
 8001818:	bf00      	nop
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2102      	movs	r1, #2
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fdea 	bl	80013fa <I2C_GetFlagStatus>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f6      	beq.n	800181a <I2C_MasterReceiveData+0x38>

	//5. start reading the data
	//procedure to read only 1 byte from slave
	if(Len == 1){
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d11f      	bne.n	8001872 <I2C_MasterReceiveData+0x90>

		//1. Disable Acking
		I2C_ManageAcking(pI2CHandle, I2C_ACK_DISABLE);
 8001832:	2100      	movs	r1, #0
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f000 f856 	bl	80018e6 <I2C_ManageAcking>

		//2. clear the addr flag
		I2C_ClearAddrFlag(pI2CHandle);
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f7ff fe1c 	bl	8001478 <I2C_ClearAddrFlag>

		//3. wait untill rxne becomes 1
		while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)));
 8001840:	bf00      	nop
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2140      	movs	r1, #64	@ 0x40
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fdd6 	bl	80013fa <I2C_GetFlagStatus>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f6      	beq.n	8001842 <I2C_MasterReceiveData+0x60>

		//4. generate stop condition
		if(Sr == I2C_DISABLE_SR)
 8001854:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d104      	bne.n	8001866 <I2C_MasterReceiveData+0x84>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f000 f87a 	bl	800195a <I2C_GenerateStopCondition>


		//5. read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	701a      	strb	r2, [r3, #0]
	}

	if(Len > 1){
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d92a      	bls.n	80018ce <I2C_MasterReceiveData+0xec>

		//1. clear the ADDR flag
		I2C_ClearAddrFlag(pI2CHandle);
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f7ff fdfd 	bl	8001478 <I2C_ClearAddrFlag>

		//2. read the data untill len becomes 0
		for(uint32_t i = Len; i > 0; i--){
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	e021      	b.n	80018c8 <I2C_MasterReceiveData+0xe6>

			//3. wait untill rxne becomes 1
			I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2140      	movs	r1, #64	@ 0x40
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fdb5 	bl	80013fa <I2C_GetFlagStatus>

			//4. when last 2 bytes are remaining
			if(i == 2){
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d10c      	bne.n	80018b0 <I2C_MasterReceiveData+0xce>

				//5. clear the ack bit
				I2C_ManageAcking(pI2CHandle, I2C_ACK_DISABLE);
 8001896:	2100      	movs	r1, #0
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 f824 	bl	80018e6 <I2C_ManageAcking>

				//6. generate the stop condition
				if(Sr == I2C_DISABLE_SR)
 800189e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d104      	bne.n	80018b0 <I2C_MasterReceiveData+0xce>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 f855 	bl	800195a <I2C_GenerateStopCondition>
			}
			//7. read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	701a      	strb	r2, [r3, #0]

			//8. increment the buffer address
			pRxBuffer++;
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	3301      	adds	r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Len; i > 0; i--){
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1da      	bne.n	8001884 <I2C_MasterReceiveData+0xa2>
		}
	}

	//9. re-enable acking
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE){
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	7a5b      	ldrb	r3, [r3, #9]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d103      	bne.n	80018de <I2C_MasterReceiveData+0xfc>
		I2C_ManageAcking(pI2CHandle, I2C_ACK_ENABLE);
 80018d6:	2101      	movs	r1, #1
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 f804 	bl	80018e6 <I2C_ManageAcking>
	}

}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <I2C_ManageAcking>:
 *
 * @Note					->
 *
 */

void I2C_ManageAcking(I2C_Handle_t *pI2CHandle, uint8_t EnorDi){
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	460b      	mov	r3, r1
 80018f0:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == I2C_ACK_DISABLE){
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d108      	bne.n	800190a <I2C_ManageAcking+0x24>
		//enable the ack
		pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001906:	601a      	str	r2, [r3, #0]
	}else{
		//disable the ack
		pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}

}
 8001908:	e007      	b.n	800191a <I2C_ManageAcking+0x34>
		pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001918:	601a      	str	r2, [r3, #0]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <I2C_PeripheralControl>:
 *
 * @Note					->
 *
 */

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8001930:	78fb      	ldrb	r3, [r7, #3]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d106      	bne.n	8001944 <I2C_PeripheralControl+0x20>
		//enable the PE bit in CR1 register
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f043 0201 	orr.w	r2, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	601a      	str	r2, [r3, #0]
	}else{
		//disable the PE bit in CR1 register
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8001942:	e005      	b.n	8001950 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 0201 	bic.w	r2, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	601a      	str	r2, [r3, #0]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <I2C_GenerateStopCondition>:
 *
 * @Note					->
 *
 */

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
	//set the start bit in CR1
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	601a      	str	r2, [r3, #0]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <RCC_GetPLLOutputClock>:

uint16_t AHB_PreScalar_Div_Values[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint8_t APB1_PreScalar_Div_Values[4] = {2, 4, 8, 16};
uint8_t APB2_PreScalar_Div_Values[4] = {2, 4, 8, 16};

uint32_t RCC_GetPLLOutputClock(void){
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
	return 0;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
	...

08001988 <RCC_GetPCLK1Value>:
	PClk2 = ((SystemClock / AHB_PreScalar) / APB2_PreScalar);

	return PClk2;
}

uint32_t RCC_GetPCLK1Value(void){
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0

	uint32_t PClk1, SystemClock;

	uint8_t ClockSource, temp, AHB_PreScalar, APB1_PreScalar;
	//first find out the clock source, to do this we have to read the CFGR register of RCC
	ClockSource = (RCC->CFGR >> 2 & 0x3);
 800198e:	4b25      	ldr	r3, [pc, #148]	@ (8001a24 <RCC_GetPCLK1Value+0x9c>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	b2db      	uxtb	r3, r3
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	727b      	strb	r3, [r7, #9]
	if(ClockSource == 0){
 800199c:	7a7b      	ldrb	r3, [r7, #9]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d102      	bne.n	80019a8 <RCC_GetPCLK1Value+0x20>
		//then system clock would be HSI, that means 16MHZ
		SystemClock = 1600000;
 80019a2:	4b21      	ldr	r3, [pc, #132]	@ (8001a28 <RCC_GetPCLK1Value+0xa0>)
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	e00b      	b.n	80019c0 <RCC_GetPCLK1Value+0x38>
	}else if(ClockSource == 1){
 80019a8:	7a7b      	ldrb	r3, [r7, #9]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d102      	bne.n	80019b4 <RCC_GetPCLK1Value+0x2c>
		//then system clock would be HSE, that means 8MHZ
		SystemClock = 800000;
 80019ae:	4b1f      	ldr	r3, [pc, #124]	@ (8001a2c <RCC_GetPCLK1Value+0xa4>)
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	e005      	b.n	80019c0 <RCC_GetPCLK1Value+0x38>
	}else if(ClockSource == 2){
 80019b4:	7a7b      	ldrb	r3, [r7, #9]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d102      	bne.n	80019c0 <RCC_GetPCLK1Value+0x38>
		//then system clock would be calculated with PLL Source
		SystemClock = RCC_GetPLLOutputClock();
 80019ba:	f7ff ffdd 	bl	8001978 <RCC_GetPLLOutputClock>
 80019be:	60f8      	str	r0, [r7, #12]
	}
	//now reads the value of CFGR extreme right most bits, this is for AHB_PreScalar
	temp = ((RCC->CFGR >> 4) & 0xF);
 80019c0:	4b18      	ldr	r3, [pc, #96]	@ (8001a24 <RCC_GetPCLK1Value+0x9c>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	091b      	lsrs	r3, r3, #4
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	723b      	strb	r3, [r7, #8]

	if(temp < 8){
 80019ce:	7a3b      	ldrb	r3, [r7, #8]
 80019d0:	2b07      	cmp	r3, #7
 80019d2:	d802      	bhi.n	80019da <RCC_GetPCLK1Value+0x52>
		AHB_PreScalar = 1;
 80019d4:	2301      	movs	r3, #1
 80019d6:	72fb      	strb	r3, [r7, #11]
 80019d8:	e005      	b.n	80019e6 <RCC_GetPCLK1Value+0x5e>
	}else{
		AHB_PreScalar = AHB_PreScalar_Div_Values[temp - 8];
 80019da:	7a3b      	ldrb	r3, [r7, #8]
 80019dc:	3b08      	subs	r3, #8
 80019de:	4a14      	ldr	r2, [pc, #80]	@ (8001a30 <RCC_GetPCLK1Value+0xa8>)
 80019e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019e4:	72fb      	strb	r3, [r7, #11]
	}
	//now reads the value of CFGR extreme right most bits, this is for APB_PreScalar
	temp = ((RCC->CFGR >> 10) & 0x7);
 80019e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <RCC_GetPCLK1Value+0x9c>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	0a9b      	lsrs	r3, r3, #10
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	723b      	strb	r3, [r7, #8]

	if(temp < 8){
 80019f4:	7a3b      	ldrb	r3, [r7, #8]
 80019f6:	2b07      	cmp	r3, #7
 80019f8:	d802      	bhi.n	8001a00 <RCC_GetPCLK1Value+0x78>
		APB1_PreScalar = 1;
 80019fa:	2301      	movs	r3, #1
 80019fc:	72bb      	strb	r3, [r7, #10]
 80019fe:	e004      	b.n	8001a0a <RCC_GetPCLK1Value+0x82>
	}else{
		APB1_PreScalar = APB1_PreScalar_Div_Values[temp - 4];
 8001a00:	7a3b      	ldrb	r3, [r7, #8]
 8001a02:	3b04      	subs	r3, #4
 8001a04:	4a0b      	ldr	r2, [pc, #44]	@ (8001a34 <RCC_GetPCLK1Value+0xac>)
 8001a06:	5cd3      	ldrb	r3, [r2, r3]
 8001a08:	72bb      	strb	r3, [r7, #10]
	}
	//can calculate the PClk1 with this formula

	PClk1 = (SystemClock/AHB_PreScalar)/APB1_PreScalar;
 8001a0a:	7afb      	ldrb	r3, [r7, #11]
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a12:	7abb      	ldrb	r3, [r7, #10]
 8001a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a18:	607b      	str	r3, [r7, #4]

	return PClk1;
 8001a1a:	687b      	ldr	r3, [r7, #4]

}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40023800 	.word	0x40023800
 8001a28:	00186a00 	.word	0x00186a00
 8001a2c:	000c3500 	.word	0x000c3500
 8001a30:	20000000 	.word	0x20000000
 8001a34:	20000010 	.word	0x20000010

08001a38 <std>:
 8001a38:	2300      	movs	r3, #0
 8001a3a:	b510      	push	{r4, lr}
 8001a3c:	4604      	mov	r4, r0
 8001a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8001a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001a46:	6083      	str	r3, [r0, #8]
 8001a48:	8181      	strh	r1, [r0, #12]
 8001a4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8001a4c:	81c2      	strh	r2, [r0, #14]
 8001a4e:	6183      	str	r3, [r0, #24]
 8001a50:	4619      	mov	r1, r3
 8001a52:	2208      	movs	r2, #8
 8001a54:	305c      	adds	r0, #92	@ 0x5c
 8001a56:	f000 f9f9 	bl	8001e4c <memset>
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a90 <std+0x58>)
 8001a5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <std+0x5c>)
 8001a60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001a62:	4b0d      	ldr	r3, [pc, #52]	@ (8001a98 <std+0x60>)
 8001a64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001a66:	4b0d      	ldr	r3, [pc, #52]	@ (8001a9c <std+0x64>)
 8001a68:	6323      	str	r3, [r4, #48]	@ 0x30
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa0 <std+0x68>)
 8001a6c:	6224      	str	r4, [r4, #32]
 8001a6e:	429c      	cmp	r4, r3
 8001a70:	d006      	beq.n	8001a80 <std+0x48>
 8001a72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001a76:	4294      	cmp	r4, r2
 8001a78:	d002      	beq.n	8001a80 <std+0x48>
 8001a7a:	33d0      	adds	r3, #208	@ 0xd0
 8001a7c:	429c      	cmp	r4, r3
 8001a7e:	d105      	bne.n	8001a8c <std+0x54>
 8001a80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a88:	f000 ba58 	b.w	8001f3c <__retarget_lock_init_recursive>
 8001a8c:	bd10      	pop	{r4, pc}
 8001a8e:	bf00      	nop
 8001a90:	08001c9d 	.word	0x08001c9d
 8001a94:	08001cbf 	.word	0x08001cbf
 8001a98:	08001cf7 	.word	0x08001cf7
 8001a9c:	08001d1b 	.word	0x08001d1b
 8001aa0:	200000d0 	.word	0x200000d0

08001aa4 <stdio_exit_handler>:
 8001aa4:	4a02      	ldr	r2, [pc, #8]	@ (8001ab0 <stdio_exit_handler+0xc>)
 8001aa6:	4903      	ldr	r1, [pc, #12]	@ (8001ab4 <stdio_exit_handler+0x10>)
 8001aa8:	4803      	ldr	r0, [pc, #12]	@ (8001ab8 <stdio_exit_handler+0x14>)
 8001aaa:	f000 b869 	b.w	8001b80 <_fwalk_sglue>
 8001aae:	bf00      	nop
 8001ab0:	20000014 	.word	0x20000014
 8001ab4:	080027d1 	.word	0x080027d1
 8001ab8:	20000024 	.word	0x20000024

08001abc <cleanup_stdio>:
 8001abc:	6841      	ldr	r1, [r0, #4]
 8001abe:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <cleanup_stdio+0x34>)
 8001ac0:	4299      	cmp	r1, r3
 8001ac2:	b510      	push	{r4, lr}
 8001ac4:	4604      	mov	r4, r0
 8001ac6:	d001      	beq.n	8001acc <cleanup_stdio+0x10>
 8001ac8:	f000 fe82 	bl	80027d0 <_fflush_r>
 8001acc:	68a1      	ldr	r1, [r4, #8]
 8001ace:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <cleanup_stdio+0x38>)
 8001ad0:	4299      	cmp	r1, r3
 8001ad2:	d002      	beq.n	8001ada <cleanup_stdio+0x1e>
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f000 fe7b 	bl	80027d0 <_fflush_r>
 8001ada:	68e1      	ldr	r1, [r4, #12]
 8001adc:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <cleanup_stdio+0x3c>)
 8001ade:	4299      	cmp	r1, r3
 8001ae0:	d004      	beq.n	8001aec <cleanup_stdio+0x30>
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ae8:	f000 be72 	b.w	80027d0 <_fflush_r>
 8001aec:	bd10      	pop	{r4, pc}
 8001aee:	bf00      	nop
 8001af0:	200000d0 	.word	0x200000d0
 8001af4:	20000138 	.word	0x20000138
 8001af8:	200001a0 	.word	0x200001a0

08001afc <global_stdio_init.part.0>:
 8001afc:	b510      	push	{r4, lr}
 8001afe:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <global_stdio_init.part.0+0x30>)
 8001b00:	4c0b      	ldr	r4, [pc, #44]	@ (8001b30 <global_stdio_init.part.0+0x34>)
 8001b02:	4a0c      	ldr	r2, [pc, #48]	@ (8001b34 <global_stdio_init.part.0+0x38>)
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	4620      	mov	r0, r4
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2104      	movs	r1, #4
 8001b0c:	f7ff ff94 	bl	8001a38 <std>
 8001b10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001b14:	2201      	movs	r2, #1
 8001b16:	2109      	movs	r1, #9
 8001b18:	f7ff ff8e 	bl	8001a38 <std>
 8001b1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001b20:	2202      	movs	r2, #2
 8001b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b26:	2112      	movs	r1, #18
 8001b28:	f7ff bf86 	b.w	8001a38 <std>
 8001b2c:	20000208 	.word	0x20000208
 8001b30:	200000d0 	.word	0x200000d0
 8001b34:	08001aa5 	.word	0x08001aa5

08001b38 <__sfp_lock_acquire>:
 8001b38:	4801      	ldr	r0, [pc, #4]	@ (8001b40 <__sfp_lock_acquire+0x8>)
 8001b3a:	f000 ba00 	b.w	8001f3e <__retarget_lock_acquire_recursive>
 8001b3e:	bf00      	nop
 8001b40:	20000211 	.word	0x20000211

08001b44 <__sfp_lock_release>:
 8001b44:	4801      	ldr	r0, [pc, #4]	@ (8001b4c <__sfp_lock_release+0x8>)
 8001b46:	f000 b9fb 	b.w	8001f40 <__retarget_lock_release_recursive>
 8001b4a:	bf00      	nop
 8001b4c:	20000211 	.word	0x20000211

08001b50 <__sinit>:
 8001b50:	b510      	push	{r4, lr}
 8001b52:	4604      	mov	r4, r0
 8001b54:	f7ff fff0 	bl	8001b38 <__sfp_lock_acquire>
 8001b58:	6a23      	ldr	r3, [r4, #32]
 8001b5a:	b11b      	cbz	r3, 8001b64 <__sinit+0x14>
 8001b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b60:	f7ff bff0 	b.w	8001b44 <__sfp_lock_release>
 8001b64:	4b04      	ldr	r3, [pc, #16]	@ (8001b78 <__sinit+0x28>)
 8001b66:	6223      	str	r3, [r4, #32]
 8001b68:	4b04      	ldr	r3, [pc, #16]	@ (8001b7c <__sinit+0x2c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f5      	bne.n	8001b5c <__sinit+0xc>
 8001b70:	f7ff ffc4 	bl	8001afc <global_stdio_init.part.0>
 8001b74:	e7f2      	b.n	8001b5c <__sinit+0xc>
 8001b76:	bf00      	nop
 8001b78:	08001abd 	.word	0x08001abd
 8001b7c:	20000208 	.word	0x20000208

08001b80 <_fwalk_sglue>:
 8001b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b84:	4607      	mov	r7, r0
 8001b86:	4688      	mov	r8, r1
 8001b88:	4614      	mov	r4, r2
 8001b8a:	2600      	movs	r6, #0
 8001b8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001b90:	f1b9 0901 	subs.w	r9, r9, #1
 8001b94:	d505      	bpl.n	8001ba2 <_fwalk_sglue+0x22>
 8001b96:	6824      	ldr	r4, [r4, #0]
 8001b98:	2c00      	cmp	r4, #0
 8001b9a:	d1f7      	bne.n	8001b8c <_fwalk_sglue+0xc>
 8001b9c:	4630      	mov	r0, r6
 8001b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ba2:	89ab      	ldrh	r3, [r5, #12]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d907      	bls.n	8001bb8 <_fwalk_sglue+0x38>
 8001ba8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001bac:	3301      	adds	r3, #1
 8001bae:	d003      	beq.n	8001bb8 <_fwalk_sglue+0x38>
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	4638      	mov	r0, r7
 8001bb4:	47c0      	blx	r8
 8001bb6:	4306      	orrs	r6, r0
 8001bb8:	3568      	adds	r5, #104	@ 0x68
 8001bba:	e7e9      	b.n	8001b90 <_fwalk_sglue+0x10>

08001bbc <iprintf>:
 8001bbc:	b40f      	push	{r0, r1, r2, r3}
 8001bbe:	b507      	push	{r0, r1, r2, lr}
 8001bc0:	4906      	ldr	r1, [pc, #24]	@ (8001bdc <iprintf+0x20>)
 8001bc2:	ab04      	add	r3, sp, #16
 8001bc4:	6808      	ldr	r0, [r1, #0]
 8001bc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8001bca:	6881      	ldr	r1, [r0, #8]
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	f000 fad9 	bl	8002184 <_vfiprintf_r>
 8001bd2:	b003      	add	sp, #12
 8001bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8001bd8:	b004      	add	sp, #16
 8001bda:	4770      	bx	lr
 8001bdc:	20000020 	.word	0x20000020

08001be0 <_puts_r>:
 8001be0:	6a03      	ldr	r3, [r0, #32]
 8001be2:	b570      	push	{r4, r5, r6, lr}
 8001be4:	6884      	ldr	r4, [r0, #8]
 8001be6:	4605      	mov	r5, r0
 8001be8:	460e      	mov	r6, r1
 8001bea:	b90b      	cbnz	r3, 8001bf0 <_puts_r+0x10>
 8001bec:	f7ff ffb0 	bl	8001b50 <__sinit>
 8001bf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001bf2:	07db      	lsls	r3, r3, #31
 8001bf4:	d405      	bmi.n	8001c02 <_puts_r+0x22>
 8001bf6:	89a3      	ldrh	r3, [r4, #12]
 8001bf8:	0598      	lsls	r0, r3, #22
 8001bfa:	d402      	bmi.n	8001c02 <_puts_r+0x22>
 8001bfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001bfe:	f000 f99e 	bl	8001f3e <__retarget_lock_acquire_recursive>
 8001c02:	89a3      	ldrh	r3, [r4, #12]
 8001c04:	0719      	lsls	r1, r3, #28
 8001c06:	d502      	bpl.n	8001c0e <_puts_r+0x2e>
 8001c08:	6923      	ldr	r3, [r4, #16]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d135      	bne.n	8001c7a <_puts_r+0x9a>
 8001c0e:	4621      	mov	r1, r4
 8001c10:	4628      	mov	r0, r5
 8001c12:	f000 f8c5 	bl	8001da0 <__swsetup_r>
 8001c16:	b380      	cbz	r0, 8001c7a <_puts_r+0x9a>
 8001c18:	f04f 35ff 	mov.w	r5, #4294967295
 8001c1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001c1e:	07da      	lsls	r2, r3, #31
 8001c20:	d405      	bmi.n	8001c2e <_puts_r+0x4e>
 8001c22:	89a3      	ldrh	r3, [r4, #12]
 8001c24:	059b      	lsls	r3, r3, #22
 8001c26:	d402      	bmi.n	8001c2e <_puts_r+0x4e>
 8001c28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001c2a:	f000 f989 	bl	8001f40 <__retarget_lock_release_recursive>
 8001c2e:	4628      	mov	r0, r5
 8001c30:	bd70      	pop	{r4, r5, r6, pc}
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	da04      	bge.n	8001c40 <_puts_r+0x60>
 8001c36:	69a2      	ldr	r2, [r4, #24]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dc17      	bgt.n	8001c6c <_puts_r+0x8c>
 8001c3c:	290a      	cmp	r1, #10
 8001c3e:	d015      	beq.n	8001c6c <_puts_r+0x8c>
 8001c40:	6823      	ldr	r3, [r4, #0]
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	6022      	str	r2, [r4, #0]
 8001c46:	7019      	strb	r1, [r3, #0]
 8001c48:	68a3      	ldr	r3, [r4, #8]
 8001c4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	60a3      	str	r3, [r4, #8]
 8001c52:	2900      	cmp	r1, #0
 8001c54:	d1ed      	bne.n	8001c32 <_puts_r+0x52>
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	da11      	bge.n	8001c7e <_puts_r+0x9e>
 8001c5a:	4622      	mov	r2, r4
 8001c5c:	210a      	movs	r1, #10
 8001c5e:	4628      	mov	r0, r5
 8001c60:	f000 f85f 	bl	8001d22 <__swbuf_r>
 8001c64:	3001      	adds	r0, #1
 8001c66:	d0d7      	beq.n	8001c18 <_puts_r+0x38>
 8001c68:	250a      	movs	r5, #10
 8001c6a:	e7d7      	b.n	8001c1c <_puts_r+0x3c>
 8001c6c:	4622      	mov	r2, r4
 8001c6e:	4628      	mov	r0, r5
 8001c70:	f000 f857 	bl	8001d22 <__swbuf_r>
 8001c74:	3001      	adds	r0, #1
 8001c76:	d1e7      	bne.n	8001c48 <_puts_r+0x68>
 8001c78:	e7ce      	b.n	8001c18 <_puts_r+0x38>
 8001c7a:	3e01      	subs	r6, #1
 8001c7c:	e7e4      	b.n	8001c48 <_puts_r+0x68>
 8001c7e:	6823      	ldr	r3, [r4, #0]
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	6022      	str	r2, [r4, #0]
 8001c84:	220a      	movs	r2, #10
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	e7ee      	b.n	8001c68 <_puts_r+0x88>
	...

08001c8c <puts>:
 8001c8c:	4b02      	ldr	r3, [pc, #8]	@ (8001c98 <puts+0xc>)
 8001c8e:	4601      	mov	r1, r0
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	f7ff bfa5 	b.w	8001be0 <_puts_r>
 8001c96:	bf00      	nop
 8001c98:	20000020 	.word	0x20000020

08001c9c <__sread>:
 8001c9c:	b510      	push	{r4, lr}
 8001c9e:	460c      	mov	r4, r1
 8001ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ca4:	f000 f8fc 	bl	8001ea0 <_read_r>
 8001ca8:	2800      	cmp	r0, #0
 8001caa:	bfab      	itete	ge
 8001cac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001cae:	89a3      	ldrhlt	r3, [r4, #12]
 8001cb0:	181b      	addge	r3, r3, r0
 8001cb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001cb6:	bfac      	ite	ge
 8001cb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001cba:	81a3      	strhlt	r3, [r4, #12]
 8001cbc:	bd10      	pop	{r4, pc}

08001cbe <__swrite>:
 8001cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cc2:	461f      	mov	r7, r3
 8001cc4:	898b      	ldrh	r3, [r1, #12]
 8001cc6:	05db      	lsls	r3, r3, #23
 8001cc8:	4605      	mov	r5, r0
 8001cca:	460c      	mov	r4, r1
 8001ccc:	4616      	mov	r6, r2
 8001cce:	d505      	bpl.n	8001cdc <__swrite+0x1e>
 8001cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f000 f8d0 	bl	8001e7c <_lseek_r>
 8001cdc:	89a3      	ldrh	r3, [r4, #12]
 8001cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ce2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ce6:	81a3      	strh	r3, [r4, #12]
 8001ce8:	4632      	mov	r2, r6
 8001cea:	463b      	mov	r3, r7
 8001cec:	4628      	mov	r0, r5
 8001cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cf2:	f000 b8e7 	b.w	8001ec4 <_write_r>

08001cf6 <__sseek>:
 8001cf6:	b510      	push	{r4, lr}
 8001cf8:	460c      	mov	r4, r1
 8001cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cfe:	f000 f8bd 	bl	8001e7c <_lseek_r>
 8001d02:	1c43      	adds	r3, r0, #1
 8001d04:	89a3      	ldrh	r3, [r4, #12]
 8001d06:	bf15      	itete	ne
 8001d08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001d0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001d0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001d12:	81a3      	strheq	r3, [r4, #12]
 8001d14:	bf18      	it	ne
 8001d16:	81a3      	strhne	r3, [r4, #12]
 8001d18:	bd10      	pop	{r4, pc}

08001d1a <__sclose>:
 8001d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d1e:	f000 b89d 	b.w	8001e5c <_close_r>

08001d22 <__swbuf_r>:
 8001d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d24:	460e      	mov	r6, r1
 8001d26:	4614      	mov	r4, r2
 8001d28:	4605      	mov	r5, r0
 8001d2a:	b118      	cbz	r0, 8001d34 <__swbuf_r+0x12>
 8001d2c:	6a03      	ldr	r3, [r0, #32]
 8001d2e:	b90b      	cbnz	r3, 8001d34 <__swbuf_r+0x12>
 8001d30:	f7ff ff0e 	bl	8001b50 <__sinit>
 8001d34:	69a3      	ldr	r3, [r4, #24]
 8001d36:	60a3      	str	r3, [r4, #8]
 8001d38:	89a3      	ldrh	r3, [r4, #12]
 8001d3a:	071a      	lsls	r2, r3, #28
 8001d3c:	d501      	bpl.n	8001d42 <__swbuf_r+0x20>
 8001d3e:	6923      	ldr	r3, [r4, #16]
 8001d40:	b943      	cbnz	r3, 8001d54 <__swbuf_r+0x32>
 8001d42:	4621      	mov	r1, r4
 8001d44:	4628      	mov	r0, r5
 8001d46:	f000 f82b 	bl	8001da0 <__swsetup_r>
 8001d4a:	b118      	cbz	r0, 8001d54 <__swbuf_r+0x32>
 8001d4c:	f04f 37ff 	mov.w	r7, #4294967295
 8001d50:	4638      	mov	r0, r7
 8001d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	6922      	ldr	r2, [r4, #16]
 8001d58:	1a98      	subs	r0, r3, r2
 8001d5a:	6963      	ldr	r3, [r4, #20]
 8001d5c:	b2f6      	uxtb	r6, r6
 8001d5e:	4283      	cmp	r3, r0
 8001d60:	4637      	mov	r7, r6
 8001d62:	dc05      	bgt.n	8001d70 <__swbuf_r+0x4e>
 8001d64:	4621      	mov	r1, r4
 8001d66:	4628      	mov	r0, r5
 8001d68:	f000 fd32 	bl	80027d0 <_fflush_r>
 8001d6c:	2800      	cmp	r0, #0
 8001d6e:	d1ed      	bne.n	8001d4c <__swbuf_r+0x2a>
 8001d70:	68a3      	ldr	r3, [r4, #8]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	60a3      	str	r3, [r4, #8]
 8001d76:	6823      	ldr	r3, [r4, #0]
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	6022      	str	r2, [r4, #0]
 8001d7c:	701e      	strb	r6, [r3, #0]
 8001d7e:	6962      	ldr	r2, [r4, #20]
 8001d80:	1c43      	adds	r3, r0, #1
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d004      	beq.n	8001d90 <__swbuf_r+0x6e>
 8001d86:	89a3      	ldrh	r3, [r4, #12]
 8001d88:	07db      	lsls	r3, r3, #31
 8001d8a:	d5e1      	bpl.n	8001d50 <__swbuf_r+0x2e>
 8001d8c:	2e0a      	cmp	r6, #10
 8001d8e:	d1df      	bne.n	8001d50 <__swbuf_r+0x2e>
 8001d90:	4621      	mov	r1, r4
 8001d92:	4628      	mov	r0, r5
 8001d94:	f000 fd1c 	bl	80027d0 <_fflush_r>
 8001d98:	2800      	cmp	r0, #0
 8001d9a:	d0d9      	beq.n	8001d50 <__swbuf_r+0x2e>
 8001d9c:	e7d6      	b.n	8001d4c <__swbuf_r+0x2a>
	...

08001da0 <__swsetup_r>:
 8001da0:	b538      	push	{r3, r4, r5, lr}
 8001da2:	4b29      	ldr	r3, [pc, #164]	@ (8001e48 <__swsetup_r+0xa8>)
 8001da4:	4605      	mov	r5, r0
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	460c      	mov	r4, r1
 8001daa:	b118      	cbz	r0, 8001db4 <__swsetup_r+0x14>
 8001dac:	6a03      	ldr	r3, [r0, #32]
 8001dae:	b90b      	cbnz	r3, 8001db4 <__swsetup_r+0x14>
 8001db0:	f7ff fece 	bl	8001b50 <__sinit>
 8001db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001db8:	0719      	lsls	r1, r3, #28
 8001dba:	d422      	bmi.n	8001e02 <__swsetup_r+0x62>
 8001dbc:	06da      	lsls	r2, r3, #27
 8001dbe:	d407      	bmi.n	8001dd0 <__swsetup_r+0x30>
 8001dc0:	2209      	movs	r2, #9
 8001dc2:	602a      	str	r2, [r5, #0]
 8001dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dc8:	81a3      	strh	r3, [r4, #12]
 8001dca:	f04f 30ff 	mov.w	r0, #4294967295
 8001dce:	e033      	b.n	8001e38 <__swsetup_r+0x98>
 8001dd0:	0758      	lsls	r0, r3, #29
 8001dd2:	d512      	bpl.n	8001dfa <__swsetup_r+0x5a>
 8001dd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001dd6:	b141      	cbz	r1, 8001dea <__swsetup_r+0x4a>
 8001dd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001ddc:	4299      	cmp	r1, r3
 8001dde:	d002      	beq.n	8001de6 <__swsetup_r+0x46>
 8001de0:	4628      	mov	r0, r5
 8001de2:	f000 f8af 	bl	8001f44 <_free_r>
 8001de6:	2300      	movs	r3, #0
 8001de8:	6363      	str	r3, [r4, #52]	@ 0x34
 8001dea:	89a3      	ldrh	r3, [r4, #12]
 8001dec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001df0:	81a3      	strh	r3, [r4, #12]
 8001df2:	2300      	movs	r3, #0
 8001df4:	6063      	str	r3, [r4, #4]
 8001df6:	6923      	ldr	r3, [r4, #16]
 8001df8:	6023      	str	r3, [r4, #0]
 8001dfa:	89a3      	ldrh	r3, [r4, #12]
 8001dfc:	f043 0308 	orr.w	r3, r3, #8
 8001e00:	81a3      	strh	r3, [r4, #12]
 8001e02:	6923      	ldr	r3, [r4, #16]
 8001e04:	b94b      	cbnz	r3, 8001e1a <__swsetup_r+0x7a>
 8001e06:	89a3      	ldrh	r3, [r4, #12]
 8001e08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001e0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e10:	d003      	beq.n	8001e1a <__swsetup_r+0x7a>
 8001e12:	4621      	mov	r1, r4
 8001e14:	4628      	mov	r0, r5
 8001e16:	f000 fd29 	bl	800286c <__smakebuf_r>
 8001e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e1e:	f013 0201 	ands.w	r2, r3, #1
 8001e22:	d00a      	beq.n	8001e3a <__swsetup_r+0x9a>
 8001e24:	2200      	movs	r2, #0
 8001e26:	60a2      	str	r2, [r4, #8]
 8001e28:	6962      	ldr	r2, [r4, #20]
 8001e2a:	4252      	negs	r2, r2
 8001e2c:	61a2      	str	r2, [r4, #24]
 8001e2e:	6922      	ldr	r2, [r4, #16]
 8001e30:	b942      	cbnz	r2, 8001e44 <__swsetup_r+0xa4>
 8001e32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001e36:	d1c5      	bne.n	8001dc4 <__swsetup_r+0x24>
 8001e38:	bd38      	pop	{r3, r4, r5, pc}
 8001e3a:	0799      	lsls	r1, r3, #30
 8001e3c:	bf58      	it	pl
 8001e3e:	6962      	ldrpl	r2, [r4, #20]
 8001e40:	60a2      	str	r2, [r4, #8]
 8001e42:	e7f4      	b.n	8001e2e <__swsetup_r+0x8e>
 8001e44:	2000      	movs	r0, #0
 8001e46:	e7f7      	b.n	8001e38 <__swsetup_r+0x98>
 8001e48:	20000020 	.word	0x20000020

08001e4c <memset>:
 8001e4c:	4402      	add	r2, r0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d100      	bne.n	8001e56 <memset+0xa>
 8001e54:	4770      	bx	lr
 8001e56:	f803 1b01 	strb.w	r1, [r3], #1
 8001e5a:	e7f9      	b.n	8001e50 <memset+0x4>

08001e5c <_close_r>:
 8001e5c:	b538      	push	{r3, r4, r5, lr}
 8001e5e:	4d06      	ldr	r5, [pc, #24]	@ (8001e78 <_close_r+0x1c>)
 8001e60:	2300      	movs	r3, #0
 8001e62:	4604      	mov	r4, r0
 8001e64:	4608      	mov	r0, r1
 8001e66:	602b      	str	r3, [r5, #0]
 8001e68:	f7fe ff71 	bl	8000d4e <_close>
 8001e6c:	1c43      	adds	r3, r0, #1
 8001e6e:	d102      	bne.n	8001e76 <_close_r+0x1a>
 8001e70:	682b      	ldr	r3, [r5, #0]
 8001e72:	b103      	cbz	r3, 8001e76 <_close_r+0x1a>
 8001e74:	6023      	str	r3, [r4, #0]
 8001e76:	bd38      	pop	{r3, r4, r5, pc}
 8001e78:	2000020c 	.word	0x2000020c

08001e7c <_lseek_r>:
 8001e7c:	b538      	push	{r3, r4, r5, lr}
 8001e7e:	4d07      	ldr	r5, [pc, #28]	@ (8001e9c <_lseek_r+0x20>)
 8001e80:	4604      	mov	r4, r0
 8001e82:	4608      	mov	r0, r1
 8001e84:	4611      	mov	r1, r2
 8001e86:	2200      	movs	r2, #0
 8001e88:	602a      	str	r2, [r5, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f7fe ff83 	bl	8000d96 <_lseek>
 8001e90:	1c43      	adds	r3, r0, #1
 8001e92:	d102      	bne.n	8001e9a <_lseek_r+0x1e>
 8001e94:	682b      	ldr	r3, [r5, #0]
 8001e96:	b103      	cbz	r3, 8001e9a <_lseek_r+0x1e>
 8001e98:	6023      	str	r3, [r4, #0]
 8001e9a:	bd38      	pop	{r3, r4, r5, pc}
 8001e9c:	2000020c 	.word	0x2000020c

08001ea0 <_read_r>:
 8001ea0:	b538      	push	{r3, r4, r5, lr}
 8001ea2:	4d07      	ldr	r5, [pc, #28]	@ (8001ec0 <_read_r+0x20>)
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	4608      	mov	r0, r1
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	2200      	movs	r2, #0
 8001eac:	602a      	str	r2, [r5, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	f7fe ff14 	bl	8000cdc <_read>
 8001eb4:	1c43      	adds	r3, r0, #1
 8001eb6:	d102      	bne.n	8001ebe <_read_r+0x1e>
 8001eb8:	682b      	ldr	r3, [r5, #0]
 8001eba:	b103      	cbz	r3, 8001ebe <_read_r+0x1e>
 8001ebc:	6023      	str	r3, [r4, #0]
 8001ebe:	bd38      	pop	{r3, r4, r5, pc}
 8001ec0:	2000020c 	.word	0x2000020c

08001ec4 <_write_r>:
 8001ec4:	b538      	push	{r3, r4, r5, lr}
 8001ec6:	4d07      	ldr	r5, [pc, #28]	@ (8001ee4 <_write_r+0x20>)
 8001ec8:	4604      	mov	r4, r0
 8001eca:	4608      	mov	r0, r1
 8001ecc:	4611      	mov	r1, r2
 8001ece:	2200      	movs	r2, #0
 8001ed0:	602a      	str	r2, [r5, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	f7fe ff1f 	bl	8000d16 <_write>
 8001ed8:	1c43      	adds	r3, r0, #1
 8001eda:	d102      	bne.n	8001ee2 <_write_r+0x1e>
 8001edc:	682b      	ldr	r3, [r5, #0]
 8001ede:	b103      	cbz	r3, 8001ee2 <_write_r+0x1e>
 8001ee0:	6023      	str	r3, [r4, #0]
 8001ee2:	bd38      	pop	{r3, r4, r5, pc}
 8001ee4:	2000020c 	.word	0x2000020c

08001ee8 <__errno>:
 8001ee8:	4b01      	ldr	r3, [pc, #4]	@ (8001ef0 <__errno+0x8>)
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000020 	.word	0x20000020

08001ef4 <__libc_init_array>:
 8001ef4:	b570      	push	{r4, r5, r6, lr}
 8001ef6:	4d0d      	ldr	r5, [pc, #52]	@ (8001f2c <__libc_init_array+0x38>)
 8001ef8:	4c0d      	ldr	r4, [pc, #52]	@ (8001f30 <__libc_init_array+0x3c>)
 8001efa:	1b64      	subs	r4, r4, r5
 8001efc:	10a4      	asrs	r4, r4, #2
 8001efe:	2600      	movs	r6, #0
 8001f00:	42a6      	cmp	r6, r4
 8001f02:	d109      	bne.n	8001f18 <__libc_init_array+0x24>
 8001f04:	4d0b      	ldr	r5, [pc, #44]	@ (8001f34 <__libc_init_array+0x40>)
 8001f06:	4c0c      	ldr	r4, [pc, #48]	@ (8001f38 <__libc_init_array+0x44>)
 8001f08:	f000 fd1e 	bl	8002948 <_init>
 8001f0c:	1b64      	subs	r4, r4, r5
 8001f0e:	10a4      	asrs	r4, r4, #2
 8001f10:	2600      	movs	r6, #0
 8001f12:	42a6      	cmp	r6, r4
 8001f14:	d105      	bne.n	8001f22 <__libc_init_array+0x2e>
 8001f16:	bd70      	pop	{r4, r5, r6, pc}
 8001f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f1c:	4798      	blx	r3
 8001f1e:	3601      	adds	r6, #1
 8001f20:	e7ee      	b.n	8001f00 <__libc_init_array+0xc>
 8001f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f26:	4798      	blx	r3
 8001f28:	3601      	adds	r6, #1
 8001f2a:	e7f2      	b.n	8001f12 <__libc_init_array+0x1e>
 8001f2c:	08002a48 	.word	0x08002a48
 8001f30:	08002a48 	.word	0x08002a48
 8001f34:	08002a48 	.word	0x08002a48
 8001f38:	08002a4c 	.word	0x08002a4c

08001f3c <__retarget_lock_init_recursive>:
 8001f3c:	4770      	bx	lr

08001f3e <__retarget_lock_acquire_recursive>:
 8001f3e:	4770      	bx	lr

08001f40 <__retarget_lock_release_recursive>:
 8001f40:	4770      	bx	lr
	...

08001f44 <_free_r>:
 8001f44:	b538      	push	{r3, r4, r5, lr}
 8001f46:	4605      	mov	r5, r0
 8001f48:	2900      	cmp	r1, #0
 8001f4a:	d041      	beq.n	8001fd0 <_free_r+0x8c>
 8001f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f50:	1f0c      	subs	r4, r1, #4
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bfb8      	it	lt
 8001f56:	18e4      	addlt	r4, r4, r3
 8001f58:	f000 f8e0 	bl	800211c <__malloc_lock>
 8001f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001fd4 <_free_r+0x90>)
 8001f5e:	6813      	ldr	r3, [r2, #0]
 8001f60:	b933      	cbnz	r3, 8001f70 <_free_r+0x2c>
 8001f62:	6063      	str	r3, [r4, #4]
 8001f64:	6014      	str	r4, [r2, #0]
 8001f66:	4628      	mov	r0, r5
 8001f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f6c:	f000 b8dc 	b.w	8002128 <__malloc_unlock>
 8001f70:	42a3      	cmp	r3, r4
 8001f72:	d908      	bls.n	8001f86 <_free_r+0x42>
 8001f74:	6820      	ldr	r0, [r4, #0]
 8001f76:	1821      	adds	r1, r4, r0
 8001f78:	428b      	cmp	r3, r1
 8001f7a:	bf01      	itttt	eq
 8001f7c:	6819      	ldreq	r1, [r3, #0]
 8001f7e:	685b      	ldreq	r3, [r3, #4]
 8001f80:	1809      	addeq	r1, r1, r0
 8001f82:	6021      	streq	r1, [r4, #0]
 8001f84:	e7ed      	b.n	8001f62 <_free_r+0x1e>
 8001f86:	461a      	mov	r2, r3
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	b10b      	cbz	r3, 8001f90 <_free_r+0x4c>
 8001f8c:	42a3      	cmp	r3, r4
 8001f8e:	d9fa      	bls.n	8001f86 <_free_r+0x42>
 8001f90:	6811      	ldr	r1, [r2, #0]
 8001f92:	1850      	adds	r0, r2, r1
 8001f94:	42a0      	cmp	r0, r4
 8001f96:	d10b      	bne.n	8001fb0 <_free_r+0x6c>
 8001f98:	6820      	ldr	r0, [r4, #0]
 8001f9a:	4401      	add	r1, r0
 8001f9c:	1850      	adds	r0, r2, r1
 8001f9e:	4283      	cmp	r3, r0
 8001fa0:	6011      	str	r1, [r2, #0]
 8001fa2:	d1e0      	bne.n	8001f66 <_free_r+0x22>
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	6053      	str	r3, [r2, #4]
 8001faa:	4408      	add	r0, r1
 8001fac:	6010      	str	r0, [r2, #0]
 8001fae:	e7da      	b.n	8001f66 <_free_r+0x22>
 8001fb0:	d902      	bls.n	8001fb8 <_free_r+0x74>
 8001fb2:	230c      	movs	r3, #12
 8001fb4:	602b      	str	r3, [r5, #0]
 8001fb6:	e7d6      	b.n	8001f66 <_free_r+0x22>
 8001fb8:	6820      	ldr	r0, [r4, #0]
 8001fba:	1821      	adds	r1, r4, r0
 8001fbc:	428b      	cmp	r3, r1
 8001fbe:	bf04      	itt	eq
 8001fc0:	6819      	ldreq	r1, [r3, #0]
 8001fc2:	685b      	ldreq	r3, [r3, #4]
 8001fc4:	6063      	str	r3, [r4, #4]
 8001fc6:	bf04      	itt	eq
 8001fc8:	1809      	addeq	r1, r1, r0
 8001fca:	6021      	streq	r1, [r4, #0]
 8001fcc:	6054      	str	r4, [r2, #4]
 8001fce:	e7ca      	b.n	8001f66 <_free_r+0x22>
 8001fd0:	bd38      	pop	{r3, r4, r5, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000218 	.word	0x20000218

08001fd8 <sbrk_aligned>:
 8001fd8:	b570      	push	{r4, r5, r6, lr}
 8001fda:	4e0f      	ldr	r6, [pc, #60]	@ (8002018 <sbrk_aligned+0x40>)
 8001fdc:	460c      	mov	r4, r1
 8001fde:	6831      	ldr	r1, [r6, #0]
 8001fe0:	4605      	mov	r5, r0
 8001fe2:	b911      	cbnz	r1, 8001fea <sbrk_aligned+0x12>
 8001fe4:	f000 fca0 	bl	8002928 <_sbrk_r>
 8001fe8:	6030      	str	r0, [r6, #0]
 8001fea:	4621      	mov	r1, r4
 8001fec:	4628      	mov	r0, r5
 8001fee:	f000 fc9b 	bl	8002928 <_sbrk_r>
 8001ff2:	1c43      	adds	r3, r0, #1
 8001ff4:	d103      	bne.n	8001ffe <sbrk_aligned+0x26>
 8001ff6:	f04f 34ff 	mov.w	r4, #4294967295
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	bd70      	pop	{r4, r5, r6, pc}
 8001ffe:	1cc4      	adds	r4, r0, #3
 8002000:	f024 0403 	bic.w	r4, r4, #3
 8002004:	42a0      	cmp	r0, r4
 8002006:	d0f8      	beq.n	8001ffa <sbrk_aligned+0x22>
 8002008:	1a21      	subs	r1, r4, r0
 800200a:	4628      	mov	r0, r5
 800200c:	f000 fc8c 	bl	8002928 <_sbrk_r>
 8002010:	3001      	adds	r0, #1
 8002012:	d1f2      	bne.n	8001ffa <sbrk_aligned+0x22>
 8002014:	e7ef      	b.n	8001ff6 <sbrk_aligned+0x1e>
 8002016:	bf00      	nop
 8002018:	20000214 	.word	0x20000214

0800201c <_malloc_r>:
 800201c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002020:	1ccd      	adds	r5, r1, #3
 8002022:	f025 0503 	bic.w	r5, r5, #3
 8002026:	3508      	adds	r5, #8
 8002028:	2d0c      	cmp	r5, #12
 800202a:	bf38      	it	cc
 800202c:	250c      	movcc	r5, #12
 800202e:	2d00      	cmp	r5, #0
 8002030:	4606      	mov	r6, r0
 8002032:	db01      	blt.n	8002038 <_malloc_r+0x1c>
 8002034:	42a9      	cmp	r1, r5
 8002036:	d904      	bls.n	8002042 <_malloc_r+0x26>
 8002038:	230c      	movs	r3, #12
 800203a:	6033      	str	r3, [r6, #0]
 800203c:	2000      	movs	r0, #0
 800203e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002042:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002118 <_malloc_r+0xfc>
 8002046:	f000 f869 	bl	800211c <__malloc_lock>
 800204a:	f8d8 3000 	ldr.w	r3, [r8]
 800204e:	461c      	mov	r4, r3
 8002050:	bb44      	cbnz	r4, 80020a4 <_malloc_r+0x88>
 8002052:	4629      	mov	r1, r5
 8002054:	4630      	mov	r0, r6
 8002056:	f7ff ffbf 	bl	8001fd8 <sbrk_aligned>
 800205a:	1c43      	adds	r3, r0, #1
 800205c:	4604      	mov	r4, r0
 800205e:	d158      	bne.n	8002112 <_malloc_r+0xf6>
 8002060:	f8d8 4000 	ldr.w	r4, [r8]
 8002064:	4627      	mov	r7, r4
 8002066:	2f00      	cmp	r7, #0
 8002068:	d143      	bne.n	80020f2 <_malloc_r+0xd6>
 800206a:	2c00      	cmp	r4, #0
 800206c:	d04b      	beq.n	8002106 <_malloc_r+0xea>
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	4639      	mov	r1, r7
 8002072:	4630      	mov	r0, r6
 8002074:	eb04 0903 	add.w	r9, r4, r3
 8002078:	f000 fc56 	bl	8002928 <_sbrk_r>
 800207c:	4581      	cmp	r9, r0
 800207e:	d142      	bne.n	8002106 <_malloc_r+0xea>
 8002080:	6821      	ldr	r1, [r4, #0]
 8002082:	1a6d      	subs	r5, r5, r1
 8002084:	4629      	mov	r1, r5
 8002086:	4630      	mov	r0, r6
 8002088:	f7ff ffa6 	bl	8001fd8 <sbrk_aligned>
 800208c:	3001      	adds	r0, #1
 800208e:	d03a      	beq.n	8002106 <_malloc_r+0xea>
 8002090:	6823      	ldr	r3, [r4, #0]
 8002092:	442b      	add	r3, r5
 8002094:	6023      	str	r3, [r4, #0]
 8002096:	f8d8 3000 	ldr.w	r3, [r8]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	bb62      	cbnz	r2, 80020f8 <_malloc_r+0xdc>
 800209e:	f8c8 7000 	str.w	r7, [r8]
 80020a2:	e00f      	b.n	80020c4 <_malloc_r+0xa8>
 80020a4:	6822      	ldr	r2, [r4, #0]
 80020a6:	1b52      	subs	r2, r2, r5
 80020a8:	d420      	bmi.n	80020ec <_malloc_r+0xd0>
 80020aa:	2a0b      	cmp	r2, #11
 80020ac:	d917      	bls.n	80020de <_malloc_r+0xc2>
 80020ae:	1961      	adds	r1, r4, r5
 80020b0:	42a3      	cmp	r3, r4
 80020b2:	6025      	str	r5, [r4, #0]
 80020b4:	bf18      	it	ne
 80020b6:	6059      	strne	r1, [r3, #4]
 80020b8:	6863      	ldr	r3, [r4, #4]
 80020ba:	bf08      	it	eq
 80020bc:	f8c8 1000 	streq.w	r1, [r8]
 80020c0:	5162      	str	r2, [r4, r5]
 80020c2:	604b      	str	r3, [r1, #4]
 80020c4:	4630      	mov	r0, r6
 80020c6:	f000 f82f 	bl	8002128 <__malloc_unlock>
 80020ca:	f104 000b 	add.w	r0, r4, #11
 80020ce:	1d23      	adds	r3, r4, #4
 80020d0:	f020 0007 	bic.w	r0, r0, #7
 80020d4:	1ac2      	subs	r2, r0, r3
 80020d6:	bf1c      	itt	ne
 80020d8:	1a1b      	subne	r3, r3, r0
 80020da:	50a3      	strne	r3, [r4, r2]
 80020dc:	e7af      	b.n	800203e <_malloc_r+0x22>
 80020de:	6862      	ldr	r2, [r4, #4]
 80020e0:	42a3      	cmp	r3, r4
 80020e2:	bf0c      	ite	eq
 80020e4:	f8c8 2000 	streq.w	r2, [r8]
 80020e8:	605a      	strne	r2, [r3, #4]
 80020ea:	e7eb      	b.n	80020c4 <_malloc_r+0xa8>
 80020ec:	4623      	mov	r3, r4
 80020ee:	6864      	ldr	r4, [r4, #4]
 80020f0:	e7ae      	b.n	8002050 <_malloc_r+0x34>
 80020f2:	463c      	mov	r4, r7
 80020f4:	687f      	ldr	r7, [r7, #4]
 80020f6:	e7b6      	b.n	8002066 <_malloc_r+0x4a>
 80020f8:	461a      	mov	r2, r3
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	42a3      	cmp	r3, r4
 80020fe:	d1fb      	bne.n	80020f8 <_malloc_r+0xdc>
 8002100:	2300      	movs	r3, #0
 8002102:	6053      	str	r3, [r2, #4]
 8002104:	e7de      	b.n	80020c4 <_malloc_r+0xa8>
 8002106:	230c      	movs	r3, #12
 8002108:	6033      	str	r3, [r6, #0]
 800210a:	4630      	mov	r0, r6
 800210c:	f000 f80c 	bl	8002128 <__malloc_unlock>
 8002110:	e794      	b.n	800203c <_malloc_r+0x20>
 8002112:	6005      	str	r5, [r0, #0]
 8002114:	e7d6      	b.n	80020c4 <_malloc_r+0xa8>
 8002116:	bf00      	nop
 8002118:	20000218 	.word	0x20000218

0800211c <__malloc_lock>:
 800211c:	4801      	ldr	r0, [pc, #4]	@ (8002124 <__malloc_lock+0x8>)
 800211e:	f7ff bf0e 	b.w	8001f3e <__retarget_lock_acquire_recursive>
 8002122:	bf00      	nop
 8002124:	20000210 	.word	0x20000210

08002128 <__malloc_unlock>:
 8002128:	4801      	ldr	r0, [pc, #4]	@ (8002130 <__malloc_unlock+0x8>)
 800212a:	f7ff bf09 	b.w	8001f40 <__retarget_lock_release_recursive>
 800212e:	bf00      	nop
 8002130:	20000210 	.word	0x20000210

08002134 <__sfputc_r>:
 8002134:	6893      	ldr	r3, [r2, #8]
 8002136:	3b01      	subs	r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	b410      	push	{r4}
 800213c:	6093      	str	r3, [r2, #8]
 800213e:	da07      	bge.n	8002150 <__sfputc_r+0x1c>
 8002140:	6994      	ldr	r4, [r2, #24]
 8002142:	42a3      	cmp	r3, r4
 8002144:	db01      	blt.n	800214a <__sfputc_r+0x16>
 8002146:	290a      	cmp	r1, #10
 8002148:	d102      	bne.n	8002150 <__sfputc_r+0x1c>
 800214a:	bc10      	pop	{r4}
 800214c:	f7ff bde9 	b.w	8001d22 <__swbuf_r>
 8002150:	6813      	ldr	r3, [r2, #0]
 8002152:	1c58      	adds	r0, r3, #1
 8002154:	6010      	str	r0, [r2, #0]
 8002156:	7019      	strb	r1, [r3, #0]
 8002158:	4608      	mov	r0, r1
 800215a:	bc10      	pop	{r4}
 800215c:	4770      	bx	lr

0800215e <__sfputs_r>:
 800215e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002160:	4606      	mov	r6, r0
 8002162:	460f      	mov	r7, r1
 8002164:	4614      	mov	r4, r2
 8002166:	18d5      	adds	r5, r2, r3
 8002168:	42ac      	cmp	r4, r5
 800216a:	d101      	bne.n	8002170 <__sfputs_r+0x12>
 800216c:	2000      	movs	r0, #0
 800216e:	e007      	b.n	8002180 <__sfputs_r+0x22>
 8002170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002174:	463a      	mov	r2, r7
 8002176:	4630      	mov	r0, r6
 8002178:	f7ff ffdc 	bl	8002134 <__sfputc_r>
 800217c:	1c43      	adds	r3, r0, #1
 800217e:	d1f3      	bne.n	8002168 <__sfputs_r+0xa>
 8002180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002184 <_vfiprintf_r>:
 8002184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002188:	460d      	mov	r5, r1
 800218a:	b09d      	sub	sp, #116	@ 0x74
 800218c:	4614      	mov	r4, r2
 800218e:	4698      	mov	r8, r3
 8002190:	4606      	mov	r6, r0
 8002192:	b118      	cbz	r0, 800219c <_vfiprintf_r+0x18>
 8002194:	6a03      	ldr	r3, [r0, #32]
 8002196:	b90b      	cbnz	r3, 800219c <_vfiprintf_r+0x18>
 8002198:	f7ff fcda 	bl	8001b50 <__sinit>
 800219c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800219e:	07d9      	lsls	r1, r3, #31
 80021a0:	d405      	bmi.n	80021ae <_vfiprintf_r+0x2a>
 80021a2:	89ab      	ldrh	r3, [r5, #12]
 80021a4:	059a      	lsls	r2, r3, #22
 80021a6:	d402      	bmi.n	80021ae <_vfiprintf_r+0x2a>
 80021a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80021aa:	f7ff fec8 	bl	8001f3e <__retarget_lock_acquire_recursive>
 80021ae:	89ab      	ldrh	r3, [r5, #12]
 80021b0:	071b      	lsls	r3, r3, #28
 80021b2:	d501      	bpl.n	80021b8 <_vfiprintf_r+0x34>
 80021b4:	692b      	ldr	r3, [r5, #16]
 80021b6:	b99b      	cbnz	r3, 80021e0 <_vfiprintf_r+0x5c>
 80021b8:	4629      	mov	r1, r5
 80021ba:	4630      	mov	r0, r6
 80021bc:	f7ff fdf0 	bl	8001da0 <__swsetup_r>
 80021c0:	b170      	cbz	r0, 80021e0 <_vfiprintf_r+0x5c>
 80021c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80021c4:	07dc      	lsls	r4, r3, #31
 80021c6:	d504      	bpl.n	80021d2 <_vfiprintf_r+0x4e>
 80021c8:	f04f 30ff 	mov.w	r0, #4294967295
 80021cc:	b01d      	add	sp, #116	@ 0x74
 80021ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021d2:	89ab      	ldrh	r3, [r5, #12]
 80021d4:	0598      	lsls	r0, r3, #22
 80021d6:	d4f7      	bmi.n	80021c8 <_vfiprintf_r+0x44>
 80021d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80021da:	f7ff feb1 	bl	8001f40 <__retarget_lock_release_recursive>
 80021de:	e7f3      	b.n	80021c8 <_vfiprintf_r+0x44>
 80021e0:	2300      	movs	r3, #0
 80021e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80021e4:	2320      	movs	r3, #32
 80021e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80021ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80021ee:	2330      	movs	r3, #48	@ 0x30
 80021f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80023a0 <_vfiprintf_r+0x21c>
 80021f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80021f8:	f04f 0901 	mov.w	r9, #1
 80021fc:	4623      	mov	r3, r4
 80021fe:	469a      	mov	sl, r3
 8002200:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002204:	b10a      	cbz	r2, 800220a <_vfiprintf_r+0x86>
 8002206:	2a25      	cmp	r2, #37	@ 0x25
 8002208:	d1f9      	bne.n	80021fe <_vfiprintf_r+0x7a>
 800220a:	ebba 0b04 	subs.w	fp, sl, r4
 800220e:	d00b      	beq.n	8002228 <_vfiprintf_r+0xa4>
 8002210:	465b      	mov	r3, fp
 8002212:	4622      	mov	r2, r4
 8002214:	4629      	mov	r1, r5
 8002216:	4630      	mov	r0, r6
 8002218:	f7ff ffa1 	bl	800215e <__sfputs_r>
 800221c:	3001      	adds	r0, #1
 800221e:	f000 80a7 	beq.w	8002370 <_vfiprintf_r+0x1ec>
 8002222:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002224:	445a      	add	r2, fp
 8002226:	9209      	str	r2, [sp, #36]	@ 0x24
 8002228:	f89a 3000 	ldrb.w	r3, [sl]
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 809f 	beq.w	8002370 <_vfiprintf_r+0x1ec>
 8002232:	2300      	movs	r3, #0
 8002234:	f04f 32ff 	mov.w	r2, #4294967295
 8002238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800223c:	f10a 0a01 	add.w	sl, sl, #1
 8002240:	9304      	str	r3, [sp, #16]
 8002242:	9307      	str	r3, [sp, #28]
 8002244:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002248:	931a      	str	r3, [sp, #104]	@ 0x68
 800224a:	4654      	mov	r4, sl
 800224c:	2205      	movs	r2, #5
 800224e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002252:	4853      	ldr	r0, [pc, #332]	@ (80023a0 <_vfiprintf_r+0x21c>)
 8002254:	f7fd ffc4 	bl	80001e0 <memchr>
 8002258:	9a04      	ldr	r2, [sp, #16]
 800225a:	b9d8      	cbnz	r0, 8002294 <_vfiprintf_r+0x110>
 800225c:	06d1      	lsls	r1, r2, #27
 800225e:	bf44      	itt	mi
 8002260:	2320      	movmi	r3, #32
 8002262:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002266:	0713      	lsls	r3, r2, #28
 8002268:	bf44      	itt	mi
 800226a:	232b      	movmi	r3, #43	@ 0x2b
 800226c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002270:	f89a 3000 	ldrb.w	r3, [sl]
 8002274:	2b2a      	cmp	r3, #42	@ 0x2a
 8002276:	d015      	beq.n	80022a4 <_vfiprintf_r+0x120>
 8002278:	9a07      	ldr	r2, [sp, #28]
 800227a:	4654      	mov	r4, sl
 800227c:	2000      	movs	r0, #0
 800227e:	f04f 0c0a 	mov.w	ip, #10
 8002282:	4621      	mov	r1, r4
 8002284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002288:	3b30      	subs	r3, #48	@ 0x30
 800228a:	2b09      	cmp	r3, #9
 800228c:	d94b      	bls.n	8002326 <_vfiprintf_r+0x1a2>
 800228e:	b1b0      	cbz	r0, 80022be <_vfiprintf_r+0x13a>
 8002290:	9207      	str	r2, [sp, #28]
 8002292:	e014      	b.n	80022be <_vfiprintf_r+0x13a>
 8002294:	eba0 0308 	sub.w	r3, r0, r8
 8002298:	fa09 f303 	lsl.w	r3, r9, r3
 800229c:	4313      	orrs	r3, r2
 800229e:	9304      	str	r3, [sp, #16]
 80022a0:	46a2      	mov	sl, r4
 80022a2:	e7d2      	b.n	800224a <_vfiprintf_r+0xc6>
 80022a4:	9b03      	ldr	r3, [sp, #12]
 80022a6:	1d19      	adds	r1, r3, #4
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	9103      	str	r1, [sp, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bfbb      	ittet	lt
 80022b0:	425b      	neglt	r3, r3
 80022b2:	f042 0202 	orrlt.w	r2, r2, #2
 80022b6:	9307      	strge	r3, [sp, #28]
 80022b8:	9307      	strlt	r3, [sp, #28]
 80022ba:	bfb8      	it	lt
 80022bc:	9204      	strlt	r2, [sp, #16]
 80022be:	7823      	ldrb	r3, [r4, #0]
 80022c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80022c2:	d10a      	bne.n	80022da <_vfiprintf_r+0x156>
 80022c4:	7863      	ldrb	r3, [r4, #1]
 80022c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80022c8:	d132      	bne.n	8002330 <_vfiprintf_r+0x1ac>
 80022ca:	9b03      	ldr	r3, [sp, #12]
 80022cc:	1d1a      	adds	r2, r3, #4
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	9203      	str	r2, [sp, #12]
 80022d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80022d6:	3402      	adds	r4, #2
 80022d8:	9305      	str	r3, [sp, #20]
 80022da:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80023a4 <_vfiprintf_r+0x220>
 80022de:	7821      	ldrb	r1, [r4, #0]
 80022e0:	2203      	movs	r2, #3
 80022e2:	4650      	mov	r0, sl
 80022e4:	f7fd ff7c 	bl	80001e0 <memchr>
 80022e8:	b138      	cbz	r0, 80022fa <_vfiprintf_r+0x176>
 80022ea:	9b04      	ldr	r3, [sp, #16]
 80022ec:	eba0 000a 	sub.w	r0, r0, sl
 80022f0:	2240      	movs	r2, #64	@ 0x40
 80022f2:	4082      	lsls	r2, r0
 80022f4:	4313      	orrs	r3, r2
 80022f6:	3401      	adds	r4, #1
 80022f8:	9304      	str	r3, [sp, #16]
 80022fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022fe:	482a      	ldr	r0, [pc, #168]	@ (80023a8 <_vfiprintf_r+0x224>)
 8002300:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002304:	2206      	movs	r2, #6
 8002306:	f7fd ff6b 	bl	80001e0 <memchr>
 800230a:	2800      	cmp	r0, #0
 800230c:	d03f      	beq.n	800238e <_vfiprintf_r+0x20a>
 800230e:	4b27      	ldr	r3, [pc, #156]	@ (80023ac <_vfiprintf_r+0x228>)
 8002310:	bb1b      	cbnz	r3, 800235a <_vfiprintf_r+0x1d6>
 8002312:	9b03      	ldr	r3, [sp, #12]
 8002314:	3307      	adds	r3, #7
 8002316:	f023 0307 	bic.w	r3, r3, #7
 800231a:	3308      	adds	r3, #8
 800231c:	9303      	str	r3, [sp, #12]
 800231e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002320:	443b      	add	r3, r7
 8002322:	9309      	str	r3, [sp, #36]	@ 0x24
 8002324:	e76a      	b.n	80021fc <_vfiprintf_r+0x78>
 8002326:	fb0c 3202 	mla	r2, ip, r2, r3
 800232a:	460c      	mov	r4, r1
 800232c:	2001      	movs	r0, #1
 800232e:	e7a8      	b.n	8002282 <_vfiprintf_r+0xfe>
 8002330:	2300      	movs	r3, #0
 8002332:	3401      	adds	r4, #1
 8002334:	9305      	str	r3, [sp, #20]
 8002336:	4619      	mov	r1, r3
 8002338:	f04f 0c0a 	mov.w	ip, #10
 800233c:	4620      	mov	r0, r4
 800233e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002342:	3a30      	subs	r2, #48	@ 0x30
 8002344:	2a09      	cmp	r2, #9
 8002346:	d903      	bls.n	8002350 <_vfiprintf_r+0x1cc>
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0c6      	beq.n	80022da <_vfiprintf_r+0x156>
 800234c:	9105      	str	r1, [sp, #20]
 800234e:	e7c4      	b.n	80022da <_vfiprintf_r+0x156>
 8002350:	fb0c 2101 	mla	r1, ip, r1, r2
 8002354:	4604      	mov	r4, r0
 8002356:	2301      	movs	r3, #1
 8002358:	e7f0      	b.n	800233c <_vfiprintf_r+0x1b8>
 800235a:	ab03      	add	r3, sp, #12
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	462a      	mov	r2, r5
 8002360:	4b13      	ldr	r3, [pc, #76]	@ (80023b0 <_vfiprintf_r+0x22c>)
 8002362:	a904      	add	r1, sp, #16
 8002364:	4630      	mov	r0, r6
 8002366:	f3af 8000 	nop.w
 800236a:	4607      	mov	r7, r0
 800236c:	1c78      	adds	r0, r7, #1
 800236e:	d1d6      	bne.n	800231e <_vfiprintf_r+0x19a>
 8002370:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002372:	07d9      	lsls	r1, r3, #31
 8002374:	d405      	bmi.n	8002382 <_vfiprintf_r+0x1fe>
 8002376:	89ab      	ldrh	r3, [r5, #12]
 8002378:	059a      	lsls	r2, r3, #22
 800237a:	d402      	bmi.n	8002382 <_vfiprintf_r+0x1fe>
 800237c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800237e:	f7ff fddf 	bl	8001f40 <__retarget_lock_release_recursive>
 8002382:	89ab      	ldrh	r3, [r5, #12]
 8002384:	065b      	lsls	r3, r3, #25
 8002386:	f53f af1f 	bmi.w	80021c8 <_vfiprintf_r+0x44>
 800238a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800238c:	e71e      	b.n	80021cc <_vfiprintf_r+0x48>
 800238e:	ab03      	add	r3, sp, #12
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	462a      	mov	r2, r5
 8002394:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <_vfiprintf_r+0x22c>)
 8002396:	a904      	add	r1, sp, #16
 8002398:	4630      	mov	r0, r6
 800239a:	f000 f879 	bl	8002490 <_printf_i>
 800239e:	e7e4      	b.n	800236a <_vfiprintf_r+0x1e6>
 80023a0:	08002a0b 	.word	0x08002a0b
 80023a4:	08002a11 	.word	0x08002a11
 80023a8:	08002a15 	.word	0x08002a15
 80023ac:	00000000 	.word	0x00000000
 80023b0:	0800215f 	.word	0x0800215f

080023b4 <_printf_common>:
 80023b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023b8:	4616      	mov	r6, r2
 80023ba:	4698      	mov	r8, r3
 80023bc:	688a      	ldr	r2, [r1, #8]
 80023be:	690b      	ldr	r3, [r1, #16]
 80023c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80023c4:	4293      	cmp	r3, r2
 80023c6:	bfb8      	it	lt
 80023c8:	4613      	movlt	r3, r2
 80023ca:	6033      	str	r3, [r6, #0]
 80023cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80023d0:	4607      	mov	r7, r0
 80023d2:	460c      	mov	r4, r1
 80023d4:	b10a      	cbz	r2, 80023da <_printf_common+0x26>
 80023d6:	3301      	adds	r3, #1
 80023d8:	6033      	str	r3, [r6, #0]
 80023da:	6823      	ldr	r3, [r4, #0]
 80023dc:	0699      	lsls	r1, r3, #26
 80023de:	bf42      	ittt	mi
 80023e0:	6833      	ldrmi	r3, [r6, #0]
 80023e2:	3302      	addmi	r3, #2
 80023e4:	6033      	strmi	r3, [r6, #0]
 80023e6:	6825      	ldr	r5, [r4, #0]
 80023e8:	f015 0506 	ands.w	r5, r5, #6
 80023ec:	d106      	bne.n	80023fc <_printf_common+0x48>
 80023ee:	f104 0a19 	add.w	sl, r4, #25
 80023f2:	68e3      	ldr	r3, [r4, #12]
 80023f4:	6832      	ldr	r2, [r6, #0]
 80023f6:	1a9b      	subs	r3, r3, r2
 80023f8:	42ab      	cmp	r3, r5
 80023fa:	dc26      	bgt.n	800244a <_printf_common+0x96>
 80023fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002400:	6822      	ldr	r2, [r4, #0]
 8002402:	3b00      	subs	r3, #0
 8002404:	bf18      	it	ne
 8002406:	2301      	movne	r3, #1
 8002408:	0692      	lsls	r2, r2, #26
 800240a:	d42b      	bmi.n	8002464 <_printf_common+0xb0>
 800240c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002410:	4641      	mov	r1, r8
 8002412:	4638      	mov	r0, r7
 8002414:	47c8      	blx	r9
 8002416:	3001      	adds	r0, #1
 8002418:	d01e      	beq.n	8002458 <_printf_common+0xa4>
 800241a:	6823      	ldr	r3, [r4, #0]
 800241c:	6922      	ldr	r2, [r4, #16]
 800241e:	f003 0306 	and.w	r3, r3, #6
 8002422:	2b04      	cmp	r3, #4
 8002424:	bf02      	ittt	eq
 8002426:	68e5      	ldreq	r5, [r4, #12]
 8002428:	6833      	ldreq	r3, [r6, #0]
 800242a:	1aed      	subeq	r5, r5, r3
 800242c:	68a3      	ldr	r3, [r4, #8]
 800242e:	bf0c      	ite	eq
 8002430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002434:	2500      	movne	r5, #0
 8002436:	4293      	cmp	r3, r2
 8002438:	bfc4      	itt	gt
 800243a:	1a9b      	subgt	r3, r3, r2
 800243c:	18ed      	addgt	r5, r5, r3
 800243e:	2600      	movs	r6, #0
 8002440:	341a      	adds	r4, #26
 8002442:	42b5      	cmp	r5, r6
 8002444:	d11a      	bne.n	800247c <_printf_common+0xc8>
 8002446:	2000      	movs	r0, #0
 8002448:	e008      	b.n	800245c <_printf_common+0xa8>
 800244a:	2301      	movs	r3, #1
 800244c:	4652      	mov	r2, sl
 800244e:	4641      	mov	r1, r8
 8002450:	4638      	mov	r0, r7
 8002452:	47c8      	blx	r9
 8002454:	3001      	adds	r0, #1
 8002456:	d103      	bne.n	8002460 <_printf_common+0xac>
 8002458:	f04f 30ff 	mov.w	r0, #4294967295
 800245c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002460:	3501      	adds	r5, #1
 8002462:	e7c6      	b.n	80023f2 <_printf_common+0x3e>
 8002464:	18e1      	adds	r1, r4, r3
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	2030      	movs	r0, #48	@ 0x30
 800246a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800246e:	4422      	add	r2, r4
 8002470:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002474:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002478:	3302      	adds	r3, #2
 800247a:	e7c7      	b.n	800240c <_printf_common+0x58>
 800247c:	2301      	movs	r3, #1
 800247e:	4622      	mov	r2, r4
 8002480:	4641      	mov	r1, r8
 8002482:	4638      	mov	r0, r7
 8002484:	47c8      	blx	r9
 8002486:	3001      	adds	r0, #1
 8002488:	d0e6      	beq.n	8002458 <_printf_common+0xa4>
 800248a:	3601      	adds	r6, #1
 800248c:	e7d9      	b.n	8002442 <_printf_common+0x8e>
	...

08002490 <_printf_i>:
 8002490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002494:	7e0f      	ldrb	r7, [r1, #24]
 8002496:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002498:	2f78      	cmp	r7, #120	@ 0x78
 800249a:	4691      	mov	r9, r2
 800249c:	4680      	mov	r8, r0
 800249e:	460c      	mov	r4, r1
 80024a0:	469a      	mov	sl, r3
 80024a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80024a6:	d807      	bhi.n	80024b8 <_printf_i+0x28>
 80024a8:	2f62      	cmp	r7, #98	@ 0x62
 80024aa:	d80a      	bhi.n	80024c2 <_printf_i+0x32>
 80024ac:	2f00      	cmp	r7, #0
 80024ae:	f000 80d2 	beq.w	8002656 <_printf_i+0x1c6>
 80024b2:	2f58      	cmp	r7, #88	@ 0x58
 80024b4:	f000 80b9 	beq.w	800262a <_printf_i+0x19a>
 80024b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80024bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80024c0:	e03a      	b.n	8002538 <_printf_i+0xa8>
 80024c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80024c6:	2b15      	cmp	r3, #21
 80024c8:	d8f6      	bhi.n	80024b8 <_printf_i+0x28>
 80024ca:	a101      	add	r1, pc, #4	@ (adr r1, 80024d0 <_printf_i+0x40>)
 80024cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80024d0:	08002529 	.word	0x08002529
 80024d4:	0800253d 	.word	0x0800253d
 80024d8:	080024b9 	.word	0x080024b9
 80024dc:	080024b9 	.word	0x080024b9
 80024e0:	080024b9 	.word	0x080024b9
 80024e4:	080024b9 	.word	0x080024b9
 80024e8:	0800253d 	.word	0x0800253d
 80024ec:	080024b9 	.word	0x080024b9
 80024f0:	080024b9 	.word	0x080024b9
 80024f4:	080024b9 	.word	0x080024b9
 80024f8:	080024b9 	.word	0x080024b9
 80024fc:	0800263d 	.word	0x0800263d
 8002500:	08002567 	.word	0x08002567
 8002504:	080025f7 	.word	0x080025f7
 8002508:	080024b9 	.word	0x080024b9
 800250c:	080024b9 	.word	0x080024b9
 8002510:	0800265f 	.word	0x0800265f
 8002514:	080024b9 	.word	0x080024b9
 8002518:	08002567 	.word	0x08002567
 800251c:	080024b9 	.word	0x080024b9
 8002520:	080024b9 	.word	0x080024b9
 8002524:	080025ff 	.word	0x080025ff
 8002528:	6833      	ldr	r3, [r6, #0]
 800252a:	1d1a      	adds	r2, r3, #4
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6032      	str	r2, [r6, #0]
 8002530:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002534:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002538:	2301      	movs	r3, #1
 800253a:	e09d      	b.n	8002678 <_printf_i+0x1e8>
 800253c:	6833      	ldr	r3, [r6, #0]
 800253e:	6820      	ldr	r0, [r4, #0]
 8002540:	1d19      	adds	r1, r3, #4
 8002542:	6031      	str	r1, [r6, #0]
 8002544:	0606      	lsls	r6, r0, #24
 8002546:	d501      	bpl.n	800254c <_printf_i+0xbc>
 8002548:	681d      	ldr	r5, [r3, #0]
 800254a:	e003      	b.n	8002554 <_printf_i+0xc4>
 800254c:	0645      	lsls	r5, r0, #25
 800254e:	d5fb      	bpl.n	8002548 <_printf_i+0xb8>
 8002550:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002554:	2d00      	cmp	r5, #0
 8002556:	da03      	bge.n	8002560 <_printf_i+0xd0>
 8002558:	232d      	movs	r3, #45	@ 0x2d
 800255a:	426d      	negs	r5, r5
 800255c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002560:	4859      	ldr	r0, [pc, #356]	@ (80026c8 <_printf_i+0x238>)
 8002562:	230a      	movs	r3, #10
 8002564:	e011      	b.n	800258a <_printf_i+0xfa>
 8002566:	6821      	ldr	r1, [r4, #0]
 8002568:	6833      	ldr	r3, [r6, #0]
 800256a:	0608      	lsls	r0, r1, #24
 800256c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002570:	d402      	bmi.n	8002578 <_printf_i+0xe8>
 8002572:	0649      	lsls	r1, r1, #25
 8002574:	bf48      	it	mi
 8002576:	b2ad      	uxthmi	r5, r5
 8002578:	2f6f      	cmp	r7, #111	@ 0x6f
 800257a:	4853      	ldr	r0, [pc, #332]	@ (80026c8 <_printf_i+0x238>)
 800257c:	6033      	str	r3, [r6, #0]
 800257e:	bf14      	ite	ne
 8002580:	230a      	movne	r3, #10
 8002582:	2308      	moveq	r3, #8
 8002584:	2100      	movs	r1, #0
 8002586:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800258a:	6866      	ldr	r6, [r4, #4]
 800258c:	60a6      	str	r6, [r4, #8]
 800258e:	2e00      	cmp	r6, #0
 8002590:	bfa2      	ittt	ge
 8002592:	6821      	ldrge	r1, [r4, #0]
 8002594:	f021 0104 	bicge.w	r1, r1, #4
 8002598:	6021      	strge	r1, [r4, #0]
 800259a:	b90d      	cbnz	r5, 80025a0 <_printf_i+0x110>
 800259c:	2e00      	cmp	r6, #0
 800259e:	d04b      	beq.n	8002638 <_printf_i+0x1a8>
 80025a0:	4616      	mov	r6, r2
 80025a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80025a6:	fb03 5711 	mls	r7, r3, r1, r5
 80025aa:	5dc7      	ldrb	r7, [r0, r7]
 80025ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80025b0:	462f      	mov	r7, r5
 80025b2:	42bb      	cmp	r3, r7
 80025b4:	460d      	mov	r5, r1
 80025b6:	d9f4      	bls.n	80025a2 <_printf_i+0x112>
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d10b      	bne.n	80025d4 <_printf_i+0x144>
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	07df      	lsls	r7, r3, #31
 80025c0:	d508      	bpl.n	80025d4 <_printf_i+0x144>
 80025c2:	6923      	ldr	r3, [r4, #16]
 80025c4:	6861      	ldr	r1, [r4, #4]
 80025c6:	4299      	cmp	r1, r3
 80025c8:	bfde      	ittt	le
 80025ca:	2330      	movle	r3, #48	@ 0x30
 80025cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80025d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80025d4:	1b92      	subs	r2, r2, r6
 80025d6:	6122      	str	r2, [r4, #16]
 80025d8:	f8cd a000 	str.w	sl, [sp]
 80025dc:	464b      	mov	r3, r9
 80025de:	aa03      	add	r2, sp, #12
 80025e0:	4621      	mov	r1, r4
 80025e2:	4640      	mov	r0, r8
 80025e4:	f7ff fee6 	bl	80023b4 <_printf_common>
 80025e8:	3001      	adds	r0, #1
 80025ea:	d14a      	bne.n	8002682 <_printf_i+0x1f2>
 80025ec:	f04f 30ff 	mov.w	r0, #4294967295
 80025f0:	b004      	add	sp, #16
 80025f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	f043 0320 	orr.w	r3, r3, #32
 80025fc:	6023      	str	r3, [r4, #0]
 80025fe:	4833      	ldr	r0, [pc, #204]	@ (80026cc <_printf_i+0x23c>)
 8002600:	2778      	movs	r7, #120	@ 0x78
 8002602:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	6831      	ldr	r1, [r6, #0]
 800260a:	061f      	lsls	r7, r3, #24
 800260c:	f851 5b04 	ldr.w	r5, [r1], #4
 8002610:	d402      	bmi.n	8002618 <_printf_i+0x188>
 8002612:	065f      	lsls	r7, r3, #25
 8002614:	bf48      	it	mi
 8002616:	b2ad      	uxthmi	r5, r5
 8002618:	6031      	str	r1, [r6, #0]
 800261a:	07d9      	lsls	r1, r3, #31
 800261c:	bf44      	itt	mi
 800261e:	f043 0320 	orrmi.w	r3, r3, #32
 8002622:	6023      	strmi	r3, [r4, #0]
 8002624:	b11d      	cbz	r5, 800262e <_printf_i+0x19e>
 8002626:	2310      	movs	r3, #16
 8002628:	e7ac      	b.n	8002584 <_printf_i+0xf4>
 800262a:	4827      	ldr	r0, [pc, #156]	@ (80026c8 <_printf_i+0x238>)
 800262c:	e7e9      	b.n	8002602 <_printf_i+0x172>
 800262e:	6823      	ldr	r3, [r4, #0]
 8002630:	f023 0320 	bic.w	r3, r3, #32
 8002634:	6023      	str	r3, [r4, #0]
 8002636:	e7f6      	b.n	8002626 <_printf_i+0x196>
 8002638:	4616      	mov	r6, r2
 800263a:	e7bd      	b.n	80025b8 <_printf_i+0x128>
 800263c:	6833      	ldr	r3, [r6, #0]
 800263e:	6825      	ldr	r5, [r4, #0]
 8002640:	6961      	ldr	r1, [r4, #20]
 8002642:	1d18      	adds	r0, r3, #4
 8002644:	6030      	str	r0, [r6, #0]
 8002646:	062e      	lsls	r6, r5, #24
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	d501      	bpl.n	8002650 <_printf_i+0x1c0>
 800264c:	6019      	str	r1, [r3, #0]
 800264e:	e002      	b.n	8002656 <_printf_i+0x1c6>
 8002650:	0668      	lsls	r0, r5, #25
 8002652:	d5fb      	bpl.n	800264c <_printf_i+0x1bc>
 8002654:	8019      	strh	r1, [r3, #0]
 8002656:	2300      	movs	r3, #0
 8002658:	6123      	str	r3, [r4, #16]
 800265a:	4616      	mov	r6, r2
 800265c:	e7bc      	b.n	80025d8 <_printf_i+0x148>
 800265e:	6833      	ldr	r3, [r6, #0]
 8002660:	1d1a      	adds	r2, r3, #4
 8002662:	6032      	str	r2, [r6, #0]
 8002664:	681e      	ldr	r6, [r3, #0]
 8002666:	6862      	ldr	r2, [r4, #4]
 8002668:	2100      	movs	r1, #0
 800266a:	4630      	mov	r0, r6
 800266c:	f7fd fdb8 	bl	80001e0 <memchr>
 8002670:	b108      	cbz	r0, 8002676 <_printf_i+0x1e6>
 8002672:	1b80      	subs	r0, r0, r6
 8002674:	6060      	str	r0, [r4, #4]
 8002676:	6863      	ldr	r3, [r4, #4]
 8002678:	6123      	str	r3, [r4, #16]
 800267a:	2300      	movs	r3, #0
 800267c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002680:	e7aa      	b.n	80025d8 <_printf_i+0x148>
 8002682:	6923      	ldr	r3, [r4, #16]
 8002684:	4632      	mov	r2, r6
 8002686:	4649      	mov	r1, r9
 8002688:	4640      	mov	r0, r8
 800268a:	47d0      	blx	sl
 800268c:	3001      	adds	r0, #1
 800268e:	d0ad      	beq.n	80025ec <_printf_i+0x15c>
 8002690:	6823      	ldr	r3, [r4, #0]
 8002692:	079b      	lsls	r3, r3, #30
 8002694:	d413      	bmi.n	80026be <_printf_i+0x22e>
 8002696:	68e0      	ldr	r0, [r4, #12]
 8002698:	9b03      	ldr	r3, [sp, #12]
 800269a:	4298      	cmp	r0, r3
 800269c:	bfb8      	it	lt
 800269e:	4618      	movlt	r0, r3
 80026a0:	e7a6      	b.n	80025f0 <_printf_i+0x160>
 80026a2:	2301      	movs	r3, #1
 80026a4:	4632      	mov	r2, r6
 80026a6:	4649      	mov	r1, r9
 80026a8:	4640      	mov	r0, r8
 80026aa:	47d0      	blx	sl
 80026ac:	3001      	adds	r0, #1
 80026ae:	d09d      	beq.n	80025ec <_printf_i+0x15c>
 80026b0:	3501      	adds	r5, #1
 80026b2:	68e3      	ldr	r3, [r4, #12]
 80026b4:	9903      	ldr	r1, [sp, #12]
 80026b6:	1a5b      	subs	r3, r3, r1
 80026b8:	42ab      	cmp	r3, r5
 80026ba:	dcf2      	bgt.n	80026a2 <_printf_i+0x212>
 80026bc:	e7eb      	b.n	8002696 <_printf_i+0x206>
 80026be:	2500      	movs	r5, #0
 80026c0:	f104 0619 	add.w	r6, r4, #25
 80026c4:	e7f5      	b.n	80026b2 <_printf_i+0x222>
 80026c6:	bf00      	nop
 80026c8:	08002a1c 	.word	0x08002a1c
 80026cc:	08002a2d 	.word	0x08002a2d

080026d0 <__sflush_r>:
 80026d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80026d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d6:	0716      	lsls	r6, r2, #28
 80026d8:	4605      	mov	r5, r0
 80026da:	460c      	mov	r4, r1
 80026dc:	d454      	bmi.n	8002788 <__sflush_r+0xb8>
 80026de:	684b      	ldr	r3, [r1, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	dc02      	bgt.n	80026ea <__sflush_r+0x1a>
 80026e4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	dd48      	ble.n	800277c <__sflush_r+0xac>
 80026ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80026ec:	2e00      	cmp	r6, #0
 80026ee:	d045      	beq.n	800277c <__sflush_r+0xac>
 80026f0:	2300      	movs	r3, #0
 80026f2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80026f6:	682f      	ldr	r7, [r5, #0]
 80026f8:	6a21      	ldr	r1, [r4, #32]
 80026fa:	602b      	str	r3, [r5, #0]
 80026fc:	d030      	beq.n	8002760 <__sflush_r+0x90>
 80026fe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002700:	89a3      	ldrh	r3, [r4, #12]
 8002702:	0759      	lsls	r1, r3, #29
 8002704:	d505      	bpl.n	8002712 <__sflush_r+0x42>
 8002706:	6863      	ldr	r3, [r4, #4]
 8002708:	1ad2      	subs	r2, r2, r3
 800270a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800270c:	b10b      	cbz	r3, 8002712 <__sflush_r+0x42>
 800270e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002710:	1ad2      	subs	r2, r2, r3
 8002712:	2300      	movs	r3, #0
 8002714:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002716:	6a21      	ldr	r1, [r4, #32]
 8002718:	4628      	mov	r0, r5
 800271a:	47b0      	blx	r6
 800271c:	1c43      	adds	r3, r0, #1
 800271e:	89a3      	ldrh	r3, [r4, #12]
 8002720:	d106      	bne.n	8002730 <__sflush_r+0x60>
 8002722:	6829      	ldr	r1, [r5, #0]
 8002724:	291d      	cmp	r1, #29
 8002726:	d82b      	bhi.n	8002780 <__sflush_r+0xb0>
 8002728:	4a28      	ldr	r2, [pc, #160]	@ (80027cc <__sflush_r+0xfc>)
 800272a:	410a      	asrs	r2, r1
 800272c:	07d6      	lsls	r6, r2, #31
 800272e:	d427      	bmi.n	8002780 <__sflush_r+0xb0>
 8002730:	2200      	movs	r2, #0
 8002732:	6062      	str	r2, [r4, #4]
 8002734:	04d9      	lsls	r1, r3, #19
 8002736:	6922      	ldr	r2, [r4, #16]
 8002738:	6022      	str	r2, [r4, #0]
 800273a:	d504      	bpl.n	8002746 <__sflush_r+0x76>
 800273c:	1c42      	adds	r2, r0, #1
 800273e:	d101      	bne.n	8002744 <__sflush_r+0x74>
 8002740:	682b      	ldr	r3, [r5, #0]
 8002742:	b903      	cbnz	r3, 8002746 <__sflush_r+0x76>
 8002744:	6560      	str	r0, [r4, #84]	@ 0x54
 8002746:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002748:	602f      	str	r7, [r5, #0]
 800274a:	b1b9      	cbz	r1, 800277c <__sflush_r+0xac>
 800274c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002750:	4299      	cmp	r1, r3
 8002752:	d002      	beq.n	800275a <__sflush_r+0x8a>
 8002754:	4628      	mov	r0, r5
 8002756:	f7ff fbf5 	bl	8001f44 <_free_r>
 800275a:	2300      	movs	r3, #0
 800275c:	6363      	str	r3, [r4, #52]	@ 0x34
 800275e:	e00d      	b.n	800277c <__sflush_r+0xac>
 8002760:	2301      	movs	r3, #1
 8002762:	4628      	mov	r0, r5
 8002764:	47b0      	blx	r6
 8002766:	4602      	mov	r2, r0
 8002768:	1c50      	adds	r0, r2, #1
 800276a:	d1c9      	bne.n	8002700 <__sflush_r+0x30>
 800276c:	682b      	ldr	r3, [r5, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0c6      	beq.n	8002700 <__sflush_r+0x30>
 8002772:	2b1d      	cmp	r3, #29
 8002774:	d001      	beq.n	800277a <__sflush_r+0xaa>
 8002776:	2b16      	cmp	r3, #22
 8002778:	d11d      	bne.n	80027b6 <__sflush_r+0xe6>
 800277a:	602f      	str	r7, [r5, #0]
 800277c:	2000      	movs	r0, #0
 800277e:	e021      	b.n	80027c4 <__sflush_r+0xf4>
 8002780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002784:	b21b      	sxth	r3, r3
 8002786:	e01a      	b.n	80027be <__sflush_r+0xee>
 8002788:	690f      	ldr	r7, [r1, #16]
 800278a:	2f00      	cmp	r7, #0
 800278c:	d0f6      	beq.n	800277c <__sflush_r+0xac>
 800278e:	0793      	lsls	r3, r2, #30
 8002790:	680e      	ldr	r6, [r1, #0]
 8002792:	bf08      	it	eq
 8002794:	694b      	ldreq	r3, [r1, #20]
 8002796:	600f      	str	r7, [r1, #0]
 8002798:	bf18      	it	ne
 800279a:	2300      	movne	r3, #0
 800279c:	1bf6      	subs	r6, r6, r7
 800279e:	608b      	str	r3, [r1, #8]
 80027a0:	2e00      	cmp	r6, #0
 80027a2:	ddeb      	ble.n	800277c <__sflush_r+0xac>
 80027a4:	6a21      	ldr	r1, [r4, #32]
 80027a6:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80027aa:	4633      	mov	r3, r6
 80027ac:	463a      	mov	r2, r7
 80027ae:	4628      	mov	r0, r5
 80027b0:	47e0      	blx	ip
 80027b2:	2800      	cmp	r0, #0
 80027b4:	dc07      	bgt.n	80027c6 <__sflush_r+0xf6>
 80027b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027be:	81a3      	strh	r3, [r4, #12]
 80027c0:	f04f 30ff 	mov.w	r0, #4294967295
 80027c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027c6:	4407      	add	r7, r0
 80027c8:	1a36      	subs	r6, r6, r0
 80027ca:	e7e9      	b.n	80027a0 <__sflush_r+0xd0>
 80027cc:	dfbffffe 	.word	0xdfbffffe

080027d0 <_fflush_r>:
 80027d0:	b538      	push	{r3, r4, r5, lr}
 80027d2:	690b      	ldr	r3, [r1, #16]
 80027d4:	4605      	mov	r5, r0
 80027d6:	460c      	mov	r4, r1
 80027d8:	b913      	cbnz	r3, 80027e0 <_fflush_r+0x10>
 80027da:	2500      	movs	r5, #0
 80027dc:	4628      	mov	r0, r5
 80027de:	bd38      	pop	{r3, r4, r5, pc}
 80027e0:	b118      	cbz	r0, 80027ea <_fflush_r+0x1a>
 80027e2:	6a03      	ldr	r3, [r0, #32]
 80027e4:	b90b      	cbnz	r3, 80027ea <_fflush_r+0x1a>
 80027e6:	f7ff f9b3 	bl	8001b50 <__sinit>
 80027ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f3      	beq.n	80027da <_fflush_r+0xa>
 80027f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80027f4:	07d0      	lsls	r0, r2, #31
 80027f6:	d404      	bmi.n	8002802 <_fflush_r+0x32>
 80027f8:	0599      	lsls	r1, r3, #22
 80027fa:	d402      	bmi.n	8002802 <_fflush_r+0x32>
 80027fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80027fe:	f7ff fb9e 	bl	8001f3e <__retarget_lock_acquire_recursive>
 8002802:	4628      	mov	r0, r5
 8002804:	4621      	mov	r1, r4
 8002806:	f7ff ff63 	bl	80026d0 <__sflush_r>
 800280a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800280c:	07da      	lsls	r2, r3, #31
 800280e:	4605      	mov	r5, r0
 8002810:	d4e4      	bmi.n	80027dc <_fflush_r+0xc>
 8002812:	89a3      	ldrh	r3, [r4, #12]
 8002814:	059b      	lsls	r3, r3, #22
 8002816:	d4e1      	bmi.n	80027dc <_fflush_r+0xc>
 8002818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800281a:	f7ff fb91 	bl	8001f40 <__retarget_lock_release_recursive>
 800281e:	e7dd      	b.n	80027dc <_fflush_r+0xc>

08002820 <__swhatbuf_r>:
 8002820:	b570      	push	{r4, r5, r6, lr}
 8002822:	460c      	mov	r4, r1
 8002824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002828:	2900      	cmp	r1, #0
 800282a:	b096      	sub	sp, #88	@ 0x58
 800282c:	4615      	mov	r5, r2
 800282e:	461e      	mov	r6, r3
 8002830:	da0d      	bge.n	800284e <__swhatbuf_r+0x2e>
 8002832:	89a3      	ldrh	r3, [r4, #12]
 8002834:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002838:	f04f 0100 	mov.w	r1, #0
 800283c:	bf14      	ite	ne
 800283e:	2340      	movne	r3, #64	@ 0x40
 8002840:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002844:	2000      	movs	r0, #0
 8002846:	6031      	str	r1, [r6, #0]
 8002848:	602b      	str	r3, [r5, #0]
 800284a:	b016      	add	sp, #88	@ 0x58
 800284c:	bd70      	pop	{r4, r5, r6, pc}
 800284e:	466a      	mov	r2, sp
 8002850:	f000 f848 	bl	80028e4 <_fstat_r>
 8002854:	2800      	cmp	r0, #0
 8002856:	dbec      	blt.n	8002832 <__swhatbuf_r+0x12>
 8002858:	9901      	ldr	r1, [sp, #4]
 800285a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800285e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002862:	4259      	negs	r1, r3
 8002864:	4159      	adcs	r1, r3
 8002866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800286a:	e7eb      	b.n	8002844 <__swhatbuf_r+0x24>

0800286c <__smakebuf_r>:
 800286c:	898b      	ldrh	r3, [r1, #12]
 800286e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002870:	079d      	lsls	r5, r3, #30
 8002872:	4606      	mov	r6, r0
 8002874:	460c      	mov	r4, r1
 8002876:	d507      	bpl.n	8002888 <__smakebuf_r+0x1c>
 8002878:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800287c:	6023      	str	r3, [r4, #0]
 800287e:	6123      	str	r3, [r4, #16]
 8002880:	2301      	movs	r3, #1
 8002882:	6163      	str	r3, [r4, #20]
 8002884:	b003      	add	sp, #12
 8002886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002888:	ab01      	add	r3, sp, #4
 800288a:	466a      	mov	r2, sp
 800288c:	f7ff ffc8 	bl	8002820 <__swhatbuf_r>
 8002890:	9f00      	ldr	r7, [sp, #0]
 8002892:	4605      	mov	r5, r0
 8002894:	4639      	mov	r1, r7
 8002896:	4630      	mov	r0, r6
 8002898:	f7ff fbc0 	bl	800201c <_malloc_r>
 800289c:	b948      	cbnz	r0, 80028b2 <__smakebuf_r+0x46>
 800289e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028a2:	059a      	lsls	r2, r3, #22
 80028a4:	d4ee      	bmi.n	8002884 <__smakebuf_r+0x18>
 80028a6:	f023 0303 	bic.w	r3, r3, #3
 80028aa:	f043 0302 	orr.w	r3, r3, #2
 80028ae:	81a3      	strh	r3, [r4, #12]
 80028b0:	e7e2      	b.n	8002878 <__smakebuf_r+0xc>
 80028b2:	89a3      	ldrh	r3, [r4, #12]
 80028b4:	6020      	str	r0, [r4, #0]
 80028b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028ba:	81a3      	strh	r3, [r4, #12]
 80028bc:	9b01      	ldr	r3, [sp, #4]
 80028be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80028c2:	b15b      	cbz	r3, 80028dc <__smakebuf_r+0x70>
 80028c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028c8:	4630      	mov	r0, r6
 80028ca:	f000 f81d 	bl	8002908 <_isatty_r>
 80028ce:	b128      	cbz	r0, 80028dc <__smakebuf_r+0x70>
 80028d0:	89a3      	ldrh	r3, [r4, #12]
 80028d2:	f023 0303 	bic.w	r3, r3, #3
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	81a3      	strh	r3, [r4, #12]
 80028dc:	89a3      	ldrh	r3, [r4, #12]
 80028de:	431d      	orrs	r5, r3
 80028e0:	81a5      	strh	r5, [r4, #12]
 80028e2:	e7cf      	b.n	8002884 <__smakebuf_r+0x18>

080028e4 <_fstat_r>:
 80028e4:	b538      	push	{r3, r4, r5, lr}
 80028e6:	4d07      	ldr	r5, [pc, #28]	@ (8002904 <_fstat_r+0x20>)
 80028e8:	2300      	movs	r3, #0
 80028ea:	4604      	mov	r4, r0
 80028ec:	4608      	mov	r0, r1
 80028ee:	4611      	mov	r1, r2
 80028f0:	602b      	str	r3, [r5, #0]
 80028f2:	f7fe fa37 	bl	8000d64 <_fstat>
 80028f6:	1c43      	adds	r3, r0, #1
 80028f8:	d102      	bne.n	8002900 <_fstat_r+0x1c>
 80028fa:	682b      	ldr	r3, [r5, #0]
 80028fc:	b103      	cbz	r3, 8002900 <_fstat_r+0x1c>
 80028fe:	6023      	str	r3, [r4, #0]
 8002900:	bd38      	pop	{r3, r4, r5, pc}
 8002902:	bf00      	nop
 8002904:	2000020c 	.word	0x2000020c

08002908 <_isatty_r>:
 8002908:	b538      	push	{r3, r4, r5, lr}
 800290a:	4d06      	ldr	r5, [pc, #24]	@ (8002924 <_isatty_r+0x1c>)
 800290c:	2300      	movs	r3, #0
 800290e:	4604      	mov	r4, r0
 8002910:	4608      	mov	r0, r1
 8002912:	602b      	str	r3, [r5, #0]
 8002914:	f7fe fa35 	bl	8000d82 <_isatty>
 8002918:	1c43      	adds	r3, r0, #1
 800291a:	d102      	bne.n	8002922 <_isatty_r+0x1a>
 800291c:	682b      	ldr	r3, [r5, #0]
 800291e:	b103      	cbz	r3, 8002922 <_isatty_r+0x1a>
 8002920:	6023      	str	r3, [r4, #0]
 8002922:	bd38      	pop	{r3, r4, r5, pc}
 8002924:	2000020c 	.word	0x2000020c

08002928 <_sbrk_r>:
 8002928:	b538      	push	{r3, r4, r5, lr}
 800292a:	4d06      	ldr	r5, [pc, #24]	@ (8002944 <_sbrk_r+0x1c>)
 800292c:	2300      	movs	r3, #0
 800292e:	4604      	mov	r4, r0
 8002930:	4608      	mov	r0, r1
 8002932:	602b      	str	r3, [r5, #0]
 8002934:	f7fe fa3c 	bl	8000db0 <_sbrk>
 8002938:	1c43      	adds	r3, r0, #1
 800293a:	d102      	bne.n	8002942 <_sbrk_r+0x1a>
 800293c:	682b      	ldr	r3, [r5, #0]
 800293e:	b103      	cbz	r3, 8002942 <_sbrk_r+0x1a>
 8002940:	6023      	str	r3, [r4, #0]
 8002942:	bd38      	pop	{r3, r4, r5, pc}
 8002944:	2000020c 	.word	0x2000020c

08002948 <_init>:
 8002948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294a:	bf00      	nop
 800294c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294e:	bc08      	pop	{r3}
 8002950:	469e      	mov	lr, r3
 8002952:	4770      	bx	lr

08002954 <_fini>:
 8002954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002956:	bf00      	nop
 8002958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295a:	bc08      	pop	{r3}
 800295c:	469e      	mov	lr, r3
 800295e:	4770      	bx	lr
