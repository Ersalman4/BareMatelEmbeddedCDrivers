/*
 * stm32411xx_usart_driver.h
 *
 *  Created on: Jan 5, 2025
 *      Author: hp
 */

#ifndef INC_STM32411XX_USART_DRIVER_H_
#define INC_STM32411XX_USART_DRIVER_H_

#include "stm32f411xx.h"


/*
 * Configuration structure of USART peripheral
 */

typedef struct{
	uint8_t 	USART_Mode;			/*|-> use to control the mode of usart either transmit or recp 	*/
	uint32_t 	USART_Baud;			/*|-> use to configure the baud rate of usart peripheral 		*/
	uint8_t 	USART_NoOfStopBits;	/*|-> use to control the no of stop bits in operation			*/
	uint8_t		USART_WordLength;	/*|-> use to configure the word length size 					*/
	uint8_t 	USART_ParityControl;/*|-> use to set the parity bit 								*/
	uint8_t 	USART_HWFlowControl;/*|-> use to control the hw flow control 						*/

}USART_Config_t;

/*
 * handle structure of usart peripheral
 */

typedef struct {
	USART_RegDef_t *pUSARTx;
	USART_Config_t 	USARTConfig;
	uint8_t 		*pTxBuffer;
	uint8_t 		*pRxBuffer;
	uint32_t		TxLen;
	uint32_t		RxLen;
	uint8_t 		TxState;
	uint8_t			RxState;

}USART_Handle_t;


/*************************************************************************************************
 * 						user configurable macros to handle usart peripheral
 *
 *************************************************************************************************/

/*
 *@USART_Mode
 *Possible options for USART_Mode
 */

#define USART_MODE_ONLY_TX 		0
#define USART_MODE_ONLY_RX 		1
#define USART_MODE_TXRX  		2

/*
 *@USART_Baud
 *Possible options for USART_Baud
 */

#define USART_STD_BAUD_1200					1200
#define USART_STD_BAUD_2400					400
#define USART_STD_BAUD_9600					9600
#define USART_STD_BAUD_19200 				19200
#define USART_STD_BAUD_38400 				38400
#define USART_STD_BAUD_57600 				57600
#define USART_STD_BAUD_115200 				115200
#define USART_STD_BAUD_230400 				230400
#define USART_STD_BAUD_460800 				460800
#define USART_STD_BAUD_921600 				921600
#define USART_STD_BAUD_2M 					2000000
#define SUART_STD_BAUD_3M 					3000000


/*
 *@USART_ParityControl
 *Possible options for USART_ParityControl
 */
#define USART_PARITY_DISABLE   				0
#define USART_PARITY_EN_EVEN  				1
#define USART_PARITY_EN_ODD   				2

/*
 *@USART_WordLength
 *Possible options for USART_WordLength
 */

#define USART_WORDLEN_8BITS  				0
#define USART_WORDLEN_9BITS  				1

/*
 *@USART_NoOfStopBits
 *Possible options for USART_NoOfStopBits
 */

#define USART_STOPBITS_1     				0
#define USART_STOPBITS_0_5   				1
#define USART_STOPBITS_2     				2
#define USART_STOPBITS_1_5   				3

/*
 *@USART_HWFlowControl
 *Possible options for USART_HWFlowControl
 */

#define USART_HW_FLOW_CTRL_NONE    			0
#define USART_HW_FLOW_CTRL_CTS    			1
#define USART_HW_FLOW_CTRL_RTS    			2
#define USART_HW_FLOW_CTRL_CTS_RTS			3

/*
 * flags generated by usart peripheral
 */

#define USART_FLAG_TXE						(1 << USART_SR_TXE)
#define USART_FLAG_RXNE						(1 << USART_SR_RXNE)
#define USART_FLAG_TC						(1 << USART_SR_TC)


/*
 * usart application states
 */

#define USART_READY							0
#define USART_BUSY_IN_TX					1
#define USART_BUSY_IN_RX					2

/*
 * usart application events
 */

#define USART_EVENT_TX_CMPLT				0
#define USART_EVENT_RX_CMPLT				1
#define USART_EVENT_CTS						2
#define USART_EVENT_IDLE					3
#define USART_ERR_ORE						4
#define USART_ERR_FE						5
#define USART_ERR_NE						6


/*************************************************************************************************
*							API'S Supported by this driver for USART Peripheral
*@ 					for more information check functions description and comments
*************************************************************************************************/

/*
 * usart peripheral clock control api
 */

void USART_PeriClkControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi);

/*
 * usart set baud rate
 */

 void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate);

/*
 * USART Init and Deinit api
 */

void USART_Init(USART_Handle_t *pUSARTHandle);

void USART_DeInit(USART_RegDef_t *pUSARTx);

/*
 * IrQ handling api
 */

void USART_IRQInterruptConfig(uint8_t IRQ_Number, uint8_t EnorDi);

void USART_IRQPriorityConfig(uint8_t IRQ_Number, uint32_t IRQ_Priority);

void USART_IRQHandling(USART_Handle_t *pUSARTHandle);

/*
 * Data Send and Receive polling based
 */

void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len);
void USART_ReceiveData(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len);

/*
 * Data Send and Receive interrupt based
 */

uint8_t USART_SendDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len);
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len);

/*
 * other peripheral control api's
 */

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi);
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t FlagName);

void USART_ClearFlag(USART_RegDef_t *pUSARTx, uint16_t FlagName);
void USART_ClearOREFlag(USART_Handle_t *pUSARTHandle);

/*
 * Application Callback
 */

void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle, uint8_t AppEv);



#endif /* INC_STM32411XX_USART_DRIVER_H_ */
